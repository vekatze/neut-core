import {
  this.c-int {c-int},
  this.c-string {c-string, from-c-string},
  this.either {Left, either},
  this.foreign {get-errno},
  this.magic,
  this.text {text},
}

inline errno: type {
  c-int
}

data system-error {
| OS-Error(errno)
| Application-Error(text)
}

inline system(a: type): type {
  either(system-error, a)
}

inline get-system-error(): system-error {
  OS-Error(get-errno())
}

inline report-system-error<a>(): system(a) {
  Left(get-system-error())
}

foreign {
  strerror(errno): pointer,
}

define get-error-message(e: system-error): text {
  match e {
  | OS-Error(i) =>
    let c-str = magic external strerror(i);
    from-c-string(this.magic.cast(pointer, &c-string, c-str))
  | Application-Error(message) =>
    message
  }
}
