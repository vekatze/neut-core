import {
  this.bool,
  this.either {Right, right-unit},
  this.file.descriptor {descriptor, stdout},
  this.system {report-system-error, system},
  this.text,
  this.text.io {print},
  this.unit {Unit, unit},
}

foreign {
  neut_core_v0_51_write_int64(int32, int64): int,
  neut_core_v0_51_write_int64_nl(int32, int64): int,
}

define write-int<r := right-unit>(d: descriptor, x: int): system(unit) {
  let d' = magic cast(descriptor, int32, d);
  let result = magic external neut_core_v0_51_write_int64(d', x);
  if lt-int(result, 0) {
    try _ = r;
    report-system-error()
  } else {
    try _ = r;
    Right(Unit)
  }
}

define write-int-line<r := right-unit>(d: descriptor, x: int): system(unit) {
  let d' = magic cast(descriptor, int32, d);
  let result = magic external neut_core_v0_51_write_int64_nl(d', x);
  if lt-int(result, 0) {
    try _ = r;
    report-system-error()
  } else {
    try _ = r;
    Right(Unit)
  }
}

define print-int(x: int): unit {
  let _ = write-int(stdout, x);
  Unit
}

define print-int-line(x: int): unit {
  let _ = write-int-line(stdout, x);
  Unit
}

define zen(): unit {
  print-int(1234);
  print("\n");
  print-int-line(123)
}
