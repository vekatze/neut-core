import {
  this.binary.eq {eq-binary, ne-binary},
  this.bool {bool},
  this.either {Right, none},
  this.eq {Eq, eq},
  this.text {_Text, _drop-N, _take-N, text, text-byte-length},
  this.unit,
}

define eq-text(t1: &text, t2: &text): bool {
  tie _Text(xs1) = t1 in
  tie _Text(xs2) = t2 in
  eq-binary(xs1, xs2)
}

define ne-text(t1: &text, t2: &text): bool {
  tie _Text(xs1) = t1 in
  tie _Text(xs2) = t2 in
  ne-binary(xs1, xs2)
}

inline as-eq: eq(text) {
  Eq of {equal = eq-text}
}

define eq-prefix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack in
  tie _Text(needle') = needle in
  this.binary.eq.eq-prefix(haystack', needle')
}

define eq-suffix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack in
  tie _Text(needle') = needle in
  this.binary.eq.eq-suffix(haystack', needle')
}

define eq-infix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack in
  tie _Text(needle') = needle in
  this.binary.eq.eq-infix(haystack', needle')
}

define strip-prefix(haystack: &text, needle: &text): ?text {
  if eq-prefix(haystack, needle) {
    let needle-len = text-byte-length(needle) in
    Right(_drop-N(haystack, needle-len))
  } else {
    none
  }
}

define strip-suffix(haystack: &text, needle: &text): ?text {
  if eq-suffix(haystack, needle) {
    let new-haystack-len = sub-int(text-byte-length(haystack), text-byte-length(needle)) in
    Right(_take-N(haystack, new-haystack-len))
  } else {
    none
  }
}
