import {
  this.bool {bool},
  this.box,
  this.ord {Ord, ord},
  this.ordering {EQ, GT, LT},
  this.rune {to-int32},
}

define lt-rune(r1: rune, r2: rune): bool {
  let r1 = to-int32(r1) in
  let r2 = to-int32(r2) in
  ult-int32(r1, r2)
}

define le-rune(r1: rune, r2: rune): bool {
  let r1 = to-int32(r1) in
  let r2 = to-int32(r2) in
  ule-int32(r1, r2)
}

define gt-rune(r1: rune, r2: rune): bool {
  let r1 = to-int32(r1) in
  let r2 = to-int32(r2) in
  ugt-int32(r1, r2)
}

define ge-rune(r1: rune, r2: rune): bool {
  let r1 = to-int32(r1) in
  let r2 = to-int32(r2) in
  uge-int32(r1, r2)
}

inline as-ord: ord(rune) {
  Ord of {
    compare = {
      function (x, y) {
        if gt-rune(x, y) {
          GT
        } else-if lt-rune(x, y) {
          LT
        } else {
          EQ
        }
      }
    },
  }
}

inline as-ord-N: ord(&rune) {
  Ord of {
    compare = {
      function (x, y) {
        if gt-rune(*x, *y) {
          GT
        } else-if lt-rune(*x, *y) {
          LT
        } else {
          EQ
        }
      }
    },
  }
}
