import {
  this.binary {binary},
  this.binary.io,
  this.bool,
  this.either {Left, Right, region},
  this.file.descriptor {descriptor, stdin, stdout},
  this.magic,
  this.system {get-error-message, report-system-error, system},
  this.text {_get-content-pointer, text, text-byte-length, to-binary},
  this.unit {Unit, unit},
}

foreign {
  neut_core_v0_51_write_line(int32, int, pointer): int,
}

define _write(f: descriptor, t: &text, r: region): system(unit) {
  try _ = r;
  this.binary.io.write(f, to-binary(t))
}

inline write(f: descriptor, t: &text): system(unit) {
  _write(f, t, Right(Unit))
}

define _write-line(d: descriptor, t: &text, r: region): system(unit) {
  let d' = magic cast(descriptor, int32, d);
  let len = text-byte-length(t);
  let ptr = _get-content-pointer(t);
  let result = magic external neut_core_v0_51_write_line(d', len, ptr);
  if lt-int(result, 0) {
    try _ = r;
    report-system-error()
  } else {
    try _ = r;
    Right(Unit)
  }
}

inline write-line(d: descriptor, t: &text): system(unit) {
  _write-line(d, t, Right(Unit))
}

define print(t: &text): unit {
  let _ = write(stdout, t);
  Unit
}

define print-line(t: &text): unit {
  let _ = write-line(stdout, t);
  Unit
}

define _read(from: descriptor, initial-buffer-size: int, r: region): system(text) {
  try bin = this.binary.io.read(from, initial-buffer-size, r);
  Right(this.magic.cast(binary, text, bin))
}

inline read(from: descriptor, initial-buffer-size: int): system(text) {
  _read(from, initial-buffer-size, Right(Unit))
}

define _get-line(initial-buffer-size: int, r: region): system(text) {
  try _ = r;
  read(stdin, initial-buffer-size)
}

inline get-line(initial-buffer-size: int): system(text) {
  _get-line(initial-buffer-size, Right(Unit))
}

define zen(): unit {
  // print("hey\n");
  // Unit
  let _ = write(stdout, "hello.\n");
  let value = read(stdin, 10);
  match value {
  | Right(_) =>
    // pin txt = _Text(value);
    print("success\n")
    // print(txt)
  | Left(e) =>
    pin text = get-error-message(e);
    print(text);
    print("\n")
  }
}
