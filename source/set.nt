import {
  this.bool {False, True, bool},
  this.dictionary {dictionary},
  this.either {Left, Right},
  this.ord {ord},
  this.unit {Unit, unit},
}

data set(a) {
| _Set(dictionary(a, unit))
}

define empty<a>: set(a) {
  _Set(this.dictionary.empty)
}

define singleton<a>(x: a): set(a) {
  _Set(this.dictionary.singleton(x, Unit))
}

inline make-insert<a>(k: ord(a)): (s: set(a), x: a) -> set(a) {
  let !insert = this.dictionary.make-insert(k);
  define _(s: set(a), x: a): set(a) {
    let _Set(s) = s;
    _Set(!insert(s, x, Unit))
  }
}

inline make-delete<a>(k: ord(a)): (s: set(a), x: a) -> set(a) {
  let !delete = this.dictionary.make-delete(k);
  define _(s: set(a), x: a): set(a) {
    let _Set(s) = s;
    _Set(!delete(s, x))
  }
}

inline make-member<a>(k: ord(a)): (s: &set(a), x: &a) -> bool {
  let !lookup = this.dictionary.make-lookup(k);
  define _(s: &set(a), x: &a): bool {
    tie _Set(s) = s;
    match !lookup(s, x) {
    | Right(_) =>
      True
    | Left(_) =>
      False
    }
  }
}
