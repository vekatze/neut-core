import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool {False, True, bool},
  this.box,
  this.int {min-int},
  this.int.ord,
  this.memory {load-int8},
  this.ord {Ord, ord},
  this.ordering {EQ, GT, LT, ordering},
  this.pointer {shift},
}

define _cmp-int8(x: int8, y: int8): ordering {
  if gt-int8(x, y) {
    GT
  } else-if lt-int8(x, y) {
    LT
  } else {
    EQ
  }
}

inline cmp-binary(xs1: &binary, xs2: &binary): ordering {
  let f =
    define self(ptr1: pointer, ptr2: pointer, index: int, len: int, fallback: ordering): ordering {
      if eq-int(index, len) {
        fallback
      } else {
        let v1 = load-int8(shift(ptr1, index));
        let v2 = load-int8(shift(ptr2, index));
        match _cmp-int8(v1, v2) {
        | EQ =>
          self(ptr1, ptr2, add-int(index, 1), len, fallback)
        | o =>
          o
        }
      }
    };
  pin len1 = binary-length(xs1);
  pin len2 = binary-length(xs2);
  let fallback-value = {
    let Ord of {compare} = this.int.ord.as-ord;
    compare(len1, len2)
  };
  let ptr1 = _get-content-pointer(xs1);
  let ptr2 = _get-content-pointer(xs2);
  let min-len = min-int(*len1, *len2);
  f(ptr1, ptr2, 0, min-len, fallback-value)
}

define lt-binary(t1: &binary, t2: &binary): bool {
  match cmp-binary(t1, t2) {
  | LT =>
    True
  | _ =>
    False
  }
}

define le-binary(t1: &binary, t2: &binary): bool {
  match cmp-binary(t1, t2) {
  | GT =>
    False
  | _ =>
    True
  }
}

define gt-binary(t1: &binary, t2: &binary): bool {
  match cmp-binary(t1, t2) {
  | GT =>
    True
  | _ =>
    False
  }
}

define ge-binary(t1: &binary, t2: &binary): bool {
  match cmp-binary(t1, t2) {
  | LT =>
    False
  | _ =>
    True
  }
}

inline as-ord: ord(binary) {
  Ord of {
    compare = {
      function (x, y) {
        cmp-binary(x, y)
      }
    },
  }
}
