import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool,
  this.c-size {C-Size},
  this.c-ssize {C-SSize, from-c-ssize, lt-c-ssize},
  this.either {Left, Right},
  this.external {malloc, read, realloc, write},
  this.file.descriptor {descriptor},
  this.int.show {show-int},
  this.list,
  this.magic,
  this.memory,
  this.pointer {extract, shift},
  this.system {Application-Error, report-system-error, system},
  this.text {format},
  this.unit {Unit, unit},
  this.word,
}

define _write-loop(d: descriptor, p: pointer, size: int): system(unit) {
  let loop =
    define write-loop(acc: int): system(unit) {
      let rest = sub-int(size, acc) in
      let head-ptr = shift(p, acc) in
      let bytes = write(d, head-ptr, C-Size(rest)) in
      if lt-c-ssize(bytes, 0) {
        report-system-error()
      } else {
        let acc = add-int(acc, from-c-ssize(bytes)) in
        if eq-int(acc, size) {
          Right(Unit)
        } else {
          write-loop(acc)
        }
      }
    }
  in
  loop(0)
}

define write(d: descriptor, b: &binary): system(unit) {
  let content-pointer = _get-content-pointer(b) in
  let len = binary-length(b) in
  _write-loop(d, content-pointer, len)
}

define _read-inner(
  data-source: descriptor,
  base-ptr: pointer,
  current-length: int,
  buffer-size: int,
): system(binary) {
  let u = this.word.size in
  let content-ptr = shift(base-ptr, add-int(mul-int(u, 2), current-length)) in
  let readable-size = sub-int(buffer-size, current-length) in
  let C-SSize(bytes) = read(data-source, content-ptr, C-Size(readable-size)) in
  let next-length = add-int(current-length, bytes) in
  if lt-int(bytes, 0) {
    report-system-error()
  } else-if eq-int(bytes, 0) {
    this.memory.store-int(next-length, shift(base-ptr, u));
    Right(this.magic.cast(pointer, binary, base-ptr))
  } else-if lt-int(bytes, readable-size) {
    _read-inner(data-source, base-ptr, next-length, buffer-size)
  } else {
    let new-buffer-size = mul-int(buffer-size, 2) in
    let new-size = add-int(mul-int(u, 2), new-buffer-size) in
    let new-base-ptr = realloc(base-ptr, C-Size(new-size)) in
    if eq-int(extract(new-base-ptr), 0) {
      report-system-error()
    } else {
      _read-inner(data-source, new-base-ptr, next-length, new-buffer-size)
    }
  }
}

define read(from: descriptor, initial-buffer-size: int): system(binary) {
  if le-int(initial-buffer-size, 0) {
    Left(Application-Error(format(
      "core.binary.io.read: initial-buffer-size must be positive, but got: {}",
      [show-int(initial-buffer-size)],
    )))
  } else {
    let u = this.word.size in
    let ptr-size = add-int(mul-int(u, 2), initial-buffer-size) in
    let ptr = malloc(C-Size(ptr-size)) in
    this.memory.store-int(0, ptr);
    _read-inner(from, ptr, 0, initial-buffer-size)
  }
}
