import {
  this.ansi {
    Background,
    Black,
    Blue,
    Bold,
    Color,
    Color-16,
    Color-256,
    Color-RGB,
    Cyan,
    Dull,
    Faint,
    Foreground,
    Green,
    Italic,
    Magenta,
    Normal,
    Red,
    Underline,
    Vivid,
    White,
    Yellow,
    color-ansi,
    style,
  },
  this.doc.chunk {
    Chunk-Choose,
    Chunk-Empty,
    Chunk-Float,
    Chunk-Int,
    Chunk-Join,
    Chunk-Line,
    Chunk-Rune,
    Chunk-Style,
    Chunk-Style-N,
    Chunk-Text,
    Chunk-Text-N,
    chunk,
  },
  this.text {text},
}

data doc {
| Chunk(chunk)
| Seq(doc, doc)
| Nest(int, doc)
| Group(doc)
}

inline empty: doc {
  Chunk(Chunk-Empty)
}

inline atom(t: text): doc {
  Chunk(Chunk-Text(t))
}

inline atom-N(t: &text): doc {
  Chunk(Chunk-Text-N(t))
}

inline atom-style(t: text): doc {
  Chunk(Chunk-Style(t))
}

inline atom-style-N(t: &text): doc {
  Chunk(Chunk-Style-N(t))
}

inline atom-int(x: int): doc {
  Chunk(Chunk-Int(x))
}

inline atom-float(x: float, decimals: int): doc {
  Chunk(Chunk-Float(x, decimals))
}

inline atom-rune(x: rune): doc {
  Chunk(Chunk-Rune(x))
}

inline break(t: &text): doc {
  Chunk(Chunk-Choose(Chunk-Text-N(t), Chunk-Line))
}

rule-right join {
  function leaf(_: int): doc {
    empty
  },
  function node-left(d: doc, acc: doc): doc {
    Seq(d, acc)
  },
  function root<a>(x: a): a {
    x
  },
}

inline newline: doc {
  Chunk(Chunk-Choose(Chunk-Text-N(""), Chunk-Line))
}

define _nested-comma-seq(prefix: doc, body: doc, suffix: doc): doc {
  join[
    prefix,
    Nest(
      2,
      join[
        break(""),
        Group(body),
      ],
    ),
    Chunk(Chunk-Choose(Chunk-Empty, Chunk-Join(Chunk-Text-N(","), Chunk-Line))),
    suffix,
  ]
}

inline ansi-doc(s: style): doc {
  match s {
  | Normal =>
    atom-style-N("\u{1b}[0m")
  | Bold =>
    atom-style-N("\u{1b}[1m")
  | Faint =>
    atom-style-N("\u{1b}[2m")
  | Italic =>
    atom-style-N("\u{1b}[3m")
  | Underline =>
    atom-style-N("\u{1b}[4m")
  | Color(color-layer, color) =>
    match color-layer {
    | Foreground =>
      match color {
      | Color-16(color-intensity, color) =>
        match color-intensity {
        | Dull =>
          match color {
          | Black =>
            atom-style-N("\u{1b}[30m")
          | Red =>
            atom-style-N("\u{1b}[31m")
          | Green =>
            atom-style-N("\u{1b}[32m")
          | Yellow =>
            atom-style-N("\u{1b}[33m")
          | Blue =>
            atom-style-N("\u{1b}[34m")
          | Magenta =>
            atom-style-N("\u{1b}[35m")
          | Cyan =>
            atom-style-N("\u{1b}[36m")
          | White =>
            atom-style-N("\u{1b}[37m")
          }
        | Vivid =>
          match color {
          | Black =>
            atom-style-N("\u{1b}[90m")
          | Red =>
            atom-style-N("\u{1b}[91m")
          | Green =>
            atom-style-N("\u{1b}[92m")
          | Yellow =>
            atom-style-N("\u{1b}[93m")
          | Blue =>
            atom-style-N("\u{1b}[94m")
          | Magenta =>
            atom-style-N("\u{1b}[95m")
          | Cyan =>
            atom-style-N("\u{1b}[96m")
          | White =>
            atom-style-N("\u{1b}[97m")
          }
        }
      | Color-256(value) =>
        join[
          atom-style-N("\u{1b}[38;5;"),
          atom-int(zext-int8-int(value)),
          atom-style-N("m"),
        ]
      | Color-RGB(r, g, b) =>
        join[
          atom-style-N("\u{1b}[38;2;"),
          atom-int(zext-int8-int(r)),
          atom-style-N(";"),
          atom-int(zext-int8-int(g)),
          atom-style-N(";"),
          atom-int(zext-int8-int(b)),
          atom-style-N("m"),
        ]
      }
    | Background =>
      match color {
      | Color-16(color-intensity, color) =>
        match color-intensity {
        | Dull =>
          match color {
          | Black =>
            atom-style-N("\u{1b}[40m")
          | Red =>
            atom-style-N("\u{1b}[41m")
          | Green =>
            atom-style-N("\u{1b}[42m")
          | Yellow =>
            atom-style-N("\u{1b}[43m")
          | Blue =>
            atom-style-N("\u{1b}[44m")
          | Magenta =>
            atom-style-N("\u{1b}[45m")
          | Cyan =>
            atom-style-N("\u{1b}[46m")
          | White =>
            atom-style-N("\u{1b}[47m")
          }
        | Vivid =>
          match color {
          | Black =>
            atom-style-N("\u{1b}[100m")
          | Red =>
            atom-style-N("\u{1b}[101m")
          | Green =>
            atom-style-N("\u{1b}[102m")
          | Yellow =>
            atom-style-N("\u{1b}[103m")
          | Blue =>
            atom-style-N("\u{1b}[104m")
          | Magenta =>
            atom-style-N("\u{1b}[105m")
          | Cyan =>
            atom-style-N("\u{1b}[106m")
          | White =>
            atom-style-N("\u{1b}[107m")
          }
        }
      | Color-256(value) =>
        join[
          atom-style-N("\u{1b}[48;5;"),
          atom-int(zext-int8-int(value)),
          atom-style-N("m"),
        ]
      | Color-RGB(r, g, b) =>
        join[
          atom-style-N("\u{1b}[48;2;"),
          atom-int(zext-int8-int(r)),
          atom-style-N(";"),
          atom-int(zext-int8-int(g)),
          atom-style-N(";"),
          atom-int(zext-int8-int(b)),
          atom-style-N("m"),
        ]
      }
    }
  }
}

define ansi-fg(c: color-ansi): doc {
  ansi-doc(Color(Foreground, Color-16(Vivid, c)))
}

define ansi-bg(c: color-ansi): doc {
  ansi-doc(Color(Background, Color-16(Vivid, c)))
}

define ansi-bold: doc {
  ansi-doc(Bold)
}

define ansi-reset: doc {
  ansi-doc(Normal)
}
