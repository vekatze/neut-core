import {
  this.binary.eq {eq-binary, ne-binary},
  this.bool {bool},
  this.either {Right, none, region},
  this.eq {Eq, eq},
  this.text {_Text, _drop-N, _take-N, text, text-byte-length},
  this.unit {Unit},
}

define eq-text(t1: &text, t2: &text): bool {
  tie _Text(xs1) = t1;
  tie _Text(xs2) = t2;
  eq-binary(xs1, xs2)
}

define ne-text(t1: &text, t2: &text): bool {
  tie _Text(xs1) = t1;
  tie _Text(xs2) = t2;
  ne-binary(xs1, xs2)
}

inline as-eq: eq(text) {
  Eq of {equal := eq-text}
}

define eq-prefix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack;
  tie _Text(needle') = needle;
  this.binary.eq.eq-prefix(haystack', needle')
}

define eq-suffix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack;
  tie _Text(needle') = needle;
  this.binary.eq.eq-suffix(haystack', needle')
}

define eq-infix(haystack: &text, needle: &text): bool {
  tie _Text(haystack') = haystack;
  tie _Text(needle') = needle;
  this.binary.eq.eq-infix(haystack', needle')
}

define _strip-prefix(haystack: &text, needle: &text, r: region): ?text {
  if eq-prefix(haystack, needle) {
    let needle-len = text-byte-length(needle);
    try _ = r;
    Right(_drop-N(haystack, needle-len))
  } else {
    try _ = r;
    none
  }
}

inline strip-prefix(haystack: &text, needle: &text): ?text {
  _strip-prefix(haystack, needle, Right(Unit))
}

define _strip-suffix(haystack: &text, needle: &text, r: region): ?text {
  if eq-suffix(haystack, needle) {
    let new-haystack-len = sub-int(text-byte-length(haystack), text-byte-length(needle));
    try _ = r;
    Right(_take-N(haystack, new-haystack-len))
  } else {
    try _ = r;
    none
  }
}

inline strip-suffix(haystack: &text, needle: &text): ?text {
  _strip-suffix(haystack, needle, Right(Unit))
}
