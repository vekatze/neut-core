import {
  this.bool {bool},
  this.box,
  this.either {Right, none},
  this.list {append, list},
  this.pair {Pair, pair},
  this.unit,
  this.word,
}

foreign {
  llvm.ctlz.i64(int64): int64,
}

// Data.IntMap.Strict in Haskell
data intmap(a) {
| Nil
| Tip(int, a)
| Bin(
    prefix: int,
    mask: int,
    left: intmap(a),
    right: intmap(a),
  )
}

inline _Key: type {
  int
}

inline _Mask: type {
  int
}

inline _Prefix: type {
  int
}

inline empty<a>: intmap(a) {
  Nil
}

inline singleton<a>(k: int, x: a): intmap(a) {
  Tip(k, x)
}

inline _mask-w(i: int, m: int): int {
  and-int(i, xor-int(mul-int(-1, m), m))
}

inline _mask(key: _Key, mask: _Mask): int {
  _mask-w(key, mask)
}

inline _zero(i: _Key, m: _Mask): bool {
  eq-int(0, and-int(i, m))
}

inline _nomatch(i: _Key, p: _Prefix, m: _Mask): bool {
  ne-int(_mask(i, m), p)
}

inline _link-with-mask<a>(m: _Mask, p1: _Prefix, t1: intmap(a), t2: intmap(a)): intmap(a) {
  let p = _mask(p1, m) in
  if _zero(p1, m) {
    Bin(p, m, t1, t2)
  } else {
    Bin(p, m, t2, t1)
  }
}

// from `Utils.Containers.Internal.BitUtil`
inline _highest-bit-mask(w: int): int {
  let size-in-bits = mul-int(this.word.size, 8) in
  shl-int(1, sub-int(sub-int(size-in-bits, 1), magic external llvm.ctlz.i64(w)))
}

inline _branch-mask(p1: _Prefix, p2: _Prefix): _Mask {
  _highest-bit-mask(xor-int(p1, p2))
}

inline _link<a>(p1: _Prefix, t1: intmap(a), p2: _Prefix, t2: intmap(a)): intmap(a) {
  _link-with-mask(_branch-mask(p1, p2), p1, t1, t2)
}

define insert<a>(t: intmap(a), k: _Key, x: a): intmap(a) {
  match t {
  | Nil =>
    Tip(k, x)
  | Tip(ky, v) =>
    if eq-int(k, ky) {
      Tip(ky, x)
    } else {
      _link(k, Tip(k, x), ky, Tip(ky, v))
    }
  | Bin(p, m, l, r) =>
    if _nomatch(k, p, m) {
      _link(k, Tip(k, x), p, Bin(p, m, l, r))
    } else-if _zero(k, m) {
      Bin(p, m, insert(l, k, x), r)
    } else {
      Bin(p, m, l, insert(r, k, x))
    }
  }
}

define lookup<a>(t: &intmap(a), k: _Key): ?&a {
  case t {
  | Nil =>
    none
  | Tip(kx, x) =>
    if eq-int(k, *kx) {
      Right(x)
    } else {
      none
    }
  | Bin(_, m, l, r) =>
    if _zero(k, *m) {
      lookup(l, k)
    } else {
      lookup(r, k)
    }
  }
}

inline _bin-check-left<a>(p: _Prefix, m: _Mask, l: intmap(a), r: intmap(a)): intmap(a) {
  match l {
  | Nil =>
    r
  | l =>
    Bin(p, m, l, r)
  }
}

inline _bin-check-right<a>(p: _Prefix, m: _Mask, l: intmap(a), r: intmap(a)): intmap(a) {
  match r {
  | Nil =>
    l
  | r =>
    Bin(p, m, l, r)
  }
}

define delete<a>(t: intmap(a), k: _Key): intmap(a) {
  match t {
  | Nil =>
    Nil
  | Tip(ky, y) =>
    if eq-int(k, ky) {
      Nil
    } else {
      Tip(ky, y)
    }
  | Bin(p, m, l, r) =>
    if _nomatch(k, p, m) {
      Bin(p, m, l, r)
    } else-if _zero(k, m) {
      _bin-check-left(p, m, delete(l, k), r)
    } else {
      _bin-check-right(p, m, l, delete(r, k))
    }
  }
}

inline from-list<v>(kvs: list(pair(int, v))): intmap(v) {
  let f =
    define self(kvs: list(pair(int, v)), acc: intmap(v)): intmap(v) {
      match kvs {
      | this.list.Nil =>
        acc
      | this.list.Cons(Pair(k, v), rest) =>
        self(rest, insert(acc, k, v))
      }
    }
  in
  f(kvs, Nil)
}

define to-list<v>(kvs: intmap(v)): list(pair(int, v)) {
  match kvs {
  | Nil =>
    []
  | Tip(k, v) =>
    [Pair(k, v)]
  | Bin(_, _, d1, d2) =>
    let xs = to-list(d1) in
    let ys = to-list(d2) in
    append(xs, ys)
  }
}
