import {
  this.bool {True, bool},
  this.box {axiom-T},
  this.cell {_new-cell, extract, mutate},
  this.control {discard},
  this.either {Left, Right, either},
  this.float.show {show-float},
  this.int {power-int},
  this.int.show {show-int},
  this.list {for-each, length, list, partition},
  this.pair {Pair, pair},
  this.random {random-float32, random-int},
  this.ref {_make-ref, ref},
  this.rune {to-int},
  this.text {text},
  this.text.io {print, printf},
  this.unit {Unit, unit},
}

define with-cell(i: int): int {
  let c = _new-cell(i) in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 21)
    })
  in
  this.cell.extract(c)
}

define box-int(i: int): meta int {
  magic cast(int, meta int, i)
}

define use-rune(r: rune): unit {
  match r {
  | `a` =>
    print("found a\n")
  | `あ` =>
    print("found あ\n")
  | _ =>
    print("found other\n")
  }
}

define my-random-in-range(lower-bound: int32, upper-bound: int32): int {
  let range-size = sub-int32(upper-bound, lower-bound) in
  printf("range-size: {}\n", [show-int(sext-int32-int(range-size))]);
  printf("range-upper: {}\n", [show-int(sext-int32-int(add-int32(range-size, 1)))]);
  let value = random-int(add-int32(range-size, 1)) in
  printf("value: {}\n", [show-int(value)]);
  add-int(value, sext-int32-int(lower-bound))
}

define use-text(x: &text): text {
  axiom-T(box x {x})
}

define zen(): unit {
  pin r: ref(int) = _make-ref(123) in
  this.ref.mutate(r, function (x) {
    add-int(x, 10)
  });
  let value = this.ref.clone(r) in
  printf("ref-value: {}\n", [show-int(value)]);
  let xs: list(either(int, bool)) = [Left(3), Right(True), Left(2), Right(True), Left(134), Right(True)] in
  let Pair(ys, _) = partition(xs) in
  let _ =
    for-each(ys, function (y) {
      printf("item: {}\n", [show-int(y)])
    })
  in
  let !k = use-text("te") in
  printf("{}\n", [!k]);
  printf("{}\n", [!k]);
  printf("{}\n", [!k]);
  printf("{}\n", [!k]);
  let v = with-cell(3) in
  printf("result of with-cell(3): {}\n", [show-int(v)]);
  let c = new-cell(*"hello") in
  let _ on c =
    let item = "test" in
    let _ =
      mutate(c, function (_) {
        let _ = item in
        *"hello"
      })
    in
    Unit
  in
  let val = extract(c) in
  printf("extracted: {}\n", [val]);
  pin yo: pair(int, bool) = Pair(3, True) in
  let tmp = *yo in
  let Pair(_, _) = tmp in
  let val = random-float32(-5, 5) in
  printf("random-float: {}\n", [show-float(fpext-float32-float(val))]);
  printf("value: {}\n", [show-int(sext-int32-int(trunc-int-int32(-3234)))]);
  let k: int = 2 in
  let val = power-int(k, 5) in
  printf("{}\n", [show-int(val)]);
  let foo = `x` in
  use-rune(foo);
  match foo {
  | `a` =>
    print("a\n")
  | `b` =>
    print("b\n")
  | `あ` =>
    print("lorem ipsum\n")
  | _ =>
    print("other\n")
  };
  let k: rune = `x` in
  match k {
  | `x` =>
    print("test")
  | _ =>
    Unit
  };
  let p: either(pair(rune, type), type) = Left(Pair(`x`, type)) in
  match p {
  | Right(_) =>
    print("right\n")
  | Left(Pair(`a`, _)) =>
    print("pair-a\n")
  | Left(Pair(`x`, _)) =>
    print("pair-x\n")
  | Left(Pair(_, _)) =>
    print("pair-x\n")
  };
  let !xs: list(int) = [1, 2, 3] in
  letbox len on !xs =
    discard(*!xs);
    box-int(length(!xs))
  in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  printf("len: {}\n", [show-int(len)]);
  printf("rune-as-int: {}\n", [show-int(to-int(foo))]);
  print("hello, world\n");
  Unit
}

define main(): unit {
  zen()
}
