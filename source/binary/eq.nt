import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool {False, True, bool, not},
  this.eq {Eq, eq},
  this.memory {load-int8},
  this.pointer {shift},
}

inline _cmp-ptr-t: type {
  (ptr1: pointer, ptr2: pointer, index: int, to: int) -> bool
}

inline _cmp-array-t: type {
  (t1: &binary, t2: &binary) -> bool
}

inline _cmp-binary(!cmp: (int8, int8) -> bool): _cmp-ptr-t {
  define self(ptr1: pointer, ptr2: pointer, index: int, to: int): bool {
    if eq-int(index, to) {
      True
    } else {
      let v1 = load-int8(shift(ptr1, index));
      let v2 = load-int8(shift(ptr2, index));
      if !cmp(v1, v2) {
        self(ptr1, ptr2, add-int(index, 1), to)
      } else {
        False
      }
    }
  }
}

define _eq-binary(ptr1: pointer, ptr2: pointer, index: int, to: int): bool {
  _cmp-binary(eq-int8)(ptr1, ptr2, index, to)
}

inline cmp-binary(cmp: _cmp-ptr-t): _cmp-array-t {
  function (t1: &binary, t2: &binary): bool {
    let len1 = binary-length(t1);
    let len2 = binary-length(t2);
    if ne-int(len1, len2) {
      False
    } else {
      let ptr1 = _get-content-pointer(t1);
      let ptr2 = _get-content-pointer(t2);
      cmp(ptr1, ptr2, 0, len1)
    }
  }
}

define eq-binary(t1: &binary, t2: &binary): bool {
  cmp-binary(_eq-binary)(t1, t2)
}

define ne-binary(t1: &binary, t2: &binary): bool {
  not(eq-binary(t1, t2))
}

inline as-eq: eq(binary) {
  Eq of {equal = eq-binary}
}

// eq-prefix("foobar", "foo") => True
// eq-prefix("foobar", "") => True
// eq-prefix("foobar", "bar") => False
define eq-prefix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  if lt-int(len-haystack, len-needle) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    _eq-binary(ptr1, ptr2, 0, len-needle)
  }
}

// eq-suffix("foobar", "bar") => True
// eq-suffix("foobar", "") => True
// eq-suffix("foobar", "foo") => False
define eq-suffix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  if lt-int(len-haystack, len-needle) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    let ptr2' = shift(ptr2, sub-int(len-haystack, len-needle));
    _eq-binary(ptr1, ptr2', 0, len-needle)
  }
}

define _eq-infix(index: int, len1: int, len2: int, needle: &binary, haystack: &binary): bool {
  if lt-int(len2, add-int(index, len1)) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    let ptr2' = shift(ptr2, index);
    if _eq-binary(ptr1, ptr2', 0, len1) {
      True
    } else {
      _eq-infix(add-int(index, 1), len1, len2, needle, haystack)
    }
  }
}

// eq-infix("foobar", "ob") => True
// eq-infix("foobar", "") => True
// eq-infix("foobar", "fo") => True
// eq-infix("foobar", "fb") => False
define eq-infix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  _eq-infix(0, len-needle, len-haystack, needle, haystack)
}
