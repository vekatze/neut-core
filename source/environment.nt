import {
  Magic,
  Word,
  this.bool {bool},
  this.c-int {C-Int, c-int, eq-c-int},
  this.c-string {c-string, from-c-string, to-c-string},
  this.control {discard},
  this.either {Right, none},
  this.list {Cons, list},
  this.memory {load-int, load-pointer},
  this.pointer {shift},
  this.system {report-system-error, system},
  this.text {_get-content-pointer, text},
  this.unit {Unit, unit},
}

foreign {
  getenv(pointer): pointer,
  setenv(pointer, pointer, c-int): c-int,
}

define get-env(name: &text): ?text {
  let c-str = _get-content-pointer(name) in
  let tmp = magic external getenv(c-str) in
  if eq-int(magic cast(pointer, int, tmp), 0) {
    none
  } else {
    Right(from-c-string(Magic.cast(pointer, &c-string, tmp)))
  }
}

define set-env(name: &text, value: &text, overwrite: bool): system(unit) {
  let name-c-str = to-c-string(name) in
  let value-c-str = to-c-string(value) in
  let flag =
    if overwrite {
      1
    } else {
      0
    }
  in
  let result on name-c-str, value-c-str =
    magic external setenv(
      magic cast(&c-string, pointer, name-c-str),
      magic cast(&c-string, pointer, value-c-str),
      C-Int(flag),
    )
  in
  discard(name-c-str);
  discard(value-c-str);
  if eq-c-int(result, 0) {
    Right(Unit)
  } else {
    report-system-error()
  }
}

define get-argc(): int {
  let argc-ptr = magic global("neut-unsafe-argc", pointer) in
  load-int(argc-ptr)
}

define get-argv(): list(text) {
  let argc = get-argc() in
  let argv-ptr = magic global("neut-unsafe-argv", pointer) in
  let argv = load-pointer(argv-ptr) in
  let u = Word.size in
  let f =
    define get-argv-helper(i: int): list(text) {
      if eq-int(i, argc) {
        []
      } else {
        let rest = get-argv-helper(add-int(i, 1)) in
        let str-ptr-ptr = shift(argv, mul-int(i, u)) in
        let str-ptr = load-int(str-ptr-ptr) in
        let t = from-c-string(Magic.cast(int, &c-string, str-ptr)) in
        Cons(t, rest)
      }
    }
  in
  f(0)
}
