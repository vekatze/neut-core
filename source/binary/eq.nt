import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool {False, True, bool, not},
  this.c-size {C-Size, c-size},
  this.eq {Eq, eq},
  this.pointer {shift},
}

foreign {
  memcmp(pointer, pointer, c-size): int,
}

define _eq-binary(ptr1: pointer, ptr2: pointer, len: int): bool {
  let result = magic external memcmp(ptr1, ptr2, C-Size(len));
  eq-int(result, 0)
}

define eq-binary(t1: &binary, t2: &binary): bool {
  let len1 = binary-length(t1);
  let len2 = binary-length(t2);
  if ne-int(len1, len2) {
    False
  } else {
    let ptr1 = _get-content-pointer(t1);
    let ptr2 = _get-content-pointer(t2);
    _eq-binary(ptr1, ptr2, len1)
  }
}

define ne-binary(t1: &binary, t2: &binary): bool {
  not(eq-binary(t1, t2))
}

inline as-eq: eq(binary) {
  Eq of {equal := eq-binary}
}

// eq-prefix("foobar", "foo") => True
// eq-prefix("foobar", "") => True
// eq-prefix("foobar", "bar") => False
define eq-prefix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  if lt-int(len-haystack, len-needle) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    _eq-binary(ptr1, ptr2, len-needle)
  }
}

// eq-suffix("foobar", "bar") => True
// eq-suffix("foobar", "") => True
// eq-suffix("foobar", "foo") => False
define eq-suffix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  if lt-int(len-haystack, len-needle) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    let ptr2' = shift(ptr2, sub-int(len-haystack, len-needle));
    _eq-binary(ptr1, ptr2', len-needle)
  }
}

define _eq-infix(index: int, len1: int, len2: int, needle: &binary, haystack: &binary): bool {
  if lt-int(len2, add-int(index, len1)) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle);
    let ptr2 = _get-content-pointer(haystack);
    let ptr2' = shift(ptr2, index);
    if _eq-binary(ptr1, ptr2', len1) {
      True
    } else {
      _eq-infix(add-int(index, 1), len1, len2, needle, haystack)
    }
  }
}

// eq-infix("foobar", "ob") => True
// eq-infix("foobar", "") => True
// eq-infix("foobar", "fo") => True
// eq-infix("foobar", "fb") => False
define eq-infix(haystack: &binary, needle: &binary): bool {
  let len-haystack = binary-length(haystack);
  let len-needle = binary-length(needle);
  _eq-infix(0, len-needle, len-haystack, needle, haystack)
}
