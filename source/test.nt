import {
  this.bool {True, bool},
  this.box {axiom-T},
  this.cell {_make-cell, extract, mutate},
  this.control {discard},
  this.either {Left, Right, either},
  this.float.io {print-float-line},
  this.int {power-int},
  this.int.io {print-int-line},
  this.list {for-each, length, list, partition},
  this.pair {Pair, pair},
  this.random {random-float32, random-int},
  this.ref {_make-ref, ref},
  this.text {lines, text, unlines},
  this.text.eq {eq-text},
  this.text.io {print, print-line},
  this.unit {Unit, unit},
}

define with-cell(i: int): int {
  let c = _make-cell(i);
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    });
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    });
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    });
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 21)
    });
  this.cell.extract(c)
}

define box-int(i: int): meta int {
  magic cast(int, meta int, i)
}

define use-rune(r: rune): unit {
  match r {
  | `a` =>
    print("found a\n")
  | `あ` =>
    print("found あ\n")
  | _ =>
    print("found other\n")
  }
}

define some-func<x := 10, z := 30>(y: int): int {
  add-int(add-int(x, y), z)
}

define some-func-2<x: int := 10, z: int := 30>(): int {
  add-int(add-int(x, 10), z)
}

define some-func-3<x := 10, z := 30>(): int {
  add-int(add-int(x, 10), z)
}

data some-item {
| Item
}

data fo {
| Fo
}

define use-id(): unit {
  let _ = some-func(20);
  let _ = some-func<1, 3>(20);
  let _ = some-func of {y := 20};
  let _ = some-func of {x := 1, y := 20};
  let _ = some-func of {x := 1, y := 20, z := 3};
  let w = some-func of {y := 20};
  print-int-line(w);
}

define my-random-in-range(lower-bound: int32, upper-bound: int32): int {
  let range-size = sub-int32(upper-bound, lower-bound);
  print("range-size: ");
  print-int-line(sext-int32-int(range-size));
  print("range-upper: ");
  print-int-line(sext-int32-int(add-int32(range-size, 1)));
  let value = random-int(add-int32(range-size, 1));
  print("value: ");
  print-int-line(value);
  add-int(value, sext-int32-int(lower-bound))
}

define use-text(x: &text): text {
  axiom-T(box x {x})
}

data pack(a) {
| Pack(a)
}

define item: int {
  10
}

define zen(): unit {
  let t1 = "hello";
  let t2 = "helloaoeu";
  if eq-text(t1, t2) {
    print("true\n")
  } else {
    print("false\n")
  };
  pin xs = [*"foo", *"bar", *"buz"];
  pin yo = this.text.intercalate-N(xs, ", yo, ");
  print-line(yo);
  let t = "foo\nbar\nbuz";
  pin yo = lines(t);
  pin sometext' = unlines(yo);
  print-line(sometext');
  pin r: ref(int) = _make-ref(123);
  this.ref.mutate(r, function (x) {
    add-int(x, 10)
  });
  let value = this.ref.clone(r);
  print("ref-value: ");
  print-int-line(value);
  let xs: list(either(int, bool)) = [Left(3), Right(True), Left(2), Right(True), Left(134), Right(True)];
  let Pair(ys, _) = partition(xs);
  let _ =
    for-each(ys, function (y) {
      print("item: ");
      print-int-line(y)
    });
  let !k = use-text("te");
  let _ on !k = print-line(!k);
  let _ on !k = print-line(!k);
  let _ on !k = print-line(!k);
  let _ on !k = print-line(!k);
  let _ = !k;
  let v = with-cell(3);
  print("result of with-cell(3): ");
  print-int-line(v);
  let c = make-cell(*"hello");
  let _ on c = {
    let item = "test";
    let _ =
      mutate(c, function (_) {
        let _ = item;
        *"hello"
      });
    Unit;
  };
  pin val = extract(c);
  print("extracted: ");
  print-line(val);
  pin yo: pair(int, bool) = Pair(3, True);
  let tmp = *yo;
  let Pair(_, _) = tmp;
  let val = random-float32(-5, 5);
  print("random-float: ");
  print-float-line(fpext-float32-float(val), 7);
  print("value: ");
  print-int-line(sext-int32-int(trunc-int-int32(-3234)));
  let k: int = 2;
  let val = power-int(k, 5);
  print-int-line(val);
  let foo = `x`;
  use-rune(foo);
  match foo {
  | `a` =>
    print("a\n")
  | `b` =>
    print("b\n")
  | `あ` =>
    print("lorem ipsum\n")
  | _ =>
    print("other\n")
  };
  let k: rune = `x`;
  match k {
  | `x` =>
    print("test")
  | _ =>
    Unit
  };
  // let p: either(pair(rune, type), type) = Left(Pair(`x`, type));
  // match p {
  // | Right(_) =>
  //   print("right\n")
  // | Left(Pair(`a`, _)) =>
  //   print("pair-a\n")
  // | Left(Pair(`x`, _)) =>
  //   print("pair-x\n")
  // | Left(Pair(_, _)) =>
  //   print("pair-x\n")
  // };
  let !xs: list(int) = [1, 2, 3];
  letbox len on !xs = {
    discard(*!xs);
    box-int(length(!xs))
  };
  let _ = discard(!xs);
  let _ = discard(!xs);
  let _ = discard(!xs);
  print("len: ");
  print-int-line(len);
  print("rune-as-int: ");
  print-int-line(len);
  print("hello, world\n");
  print-line("yo");
  use-id();
}

define main(): unit {
  zen();
}

define id<a>(x: a): a {
  x
}

data config(a) {
| Config(
    x: a,
    hoge: int,
  )
}

define my-func<a: type>(
  some-value: a,
): a {
  some-value
}

define my-id(a: type, x: a): a {
  x
}

define id-id(a: type, x: a): a {
  my-id((a: type, x: a) -> a, my-id)(a, x)
}
