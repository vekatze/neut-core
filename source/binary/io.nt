import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool,
  this.c-size {C-Size},
  this.c-ssize {C-SSize, from-c-ssize, lt-c-ssize},
  this.either {Left, Right, rho},
  this.external {malloc, read, realloc, write},
  this.file.descriptor {descriptor},
  this.int.show {show-int},
  this.list,
  this.magic,
  this.memory,
  this.pointer {extract, shift},
  this.system {Application-Error, report-system-error, system},
  this.text {format},
  this.unit {Unit, unit},
  this.word,
}

define _write-loop(d: descriptor, p: pointer, size: int, r: system(unit)): system(unit) {
  let loop =
    define write-loop(acc: int, r: system(unit)): system(unit) {
      let rest = sub-int(size, acc);
      let head-ptr = shift(p, acc);
      let bytes = write(d, head-ptr, C-Size(rest));
      if lt-c-ssize(bytes, 0) {
        try _ = r;
        report-system-error()
      } else {
        let acc = add-int(acc, from-c-ssize(bytes));
        if eq-int(acc, size) {
          try _ = r;
          Right(Unit)
        } else {
          write-loop(acc, r)
        }
      }
    };
  loop(0, r)
}

define write<r := rho>(d: descriptor, b: &binary): system(unit) {
  let content-pointer = _get-content-pointer(b);
  let len = binary-length(b);
  _write-loop(d, content-pointer, len, r)
}

define _read-inner(
  data-source: descriptor,
  base-ptr: pointer,
  current-length: int,
  buffer-size: int,
  r: system(unit),
): system(binary) {
  let u = this.word.size;
  let content-ptr = shift(base-ptr, add-int(mul-int(u, 2), current-length));
  let readable-size = sub-int(buffer-size, current-length);
  let C-SSize(bytes) = read(data-source, content-ptr, C-Size(readable-size));
  let next-length = add-int(current-length, bytes);
  if lt-int(bytes, 0) {
    try _ = r;
    report-system-error()
  } else-if eq-int(bytes, 0) {
    this.memory.store-int(next-length, shift(base-ptr, u));
    try _ = r;
    Right(this.magic.cast(pointer, binary, base-ptr))
  } else-if lt-int(bytes, readable-size) {
    _read-inner(data-source, base-ptr, next-length, buffer-size, r)
  } else {
    let new-buffer-size = mul-int(buffer-size, 2);
    let new-size = add-int(mul-int(u, 2), new-buffer-size);
    let new-base-ptr = realloc(base-ptr, C-Size(new-size));
    if eq-int(extract(new-base-ptr), 0) {
      try _ = r;
      report-system-error()
    } else {
      _read-inner(data-source, new-base-ptr, next-length, new-buffer-size, r)
    }
  }
}

define read<r := rho>(from: descriptor, initial-buffer-size: int): system(binary) {
  if le-int(initial-buffer-size, 0) {
    try _ = r;
    Left(Application-Error(format(
      "core.binary.io.read: initial-buffer-size must be positive, but got: {}",
      List[show-int(initial-buffer-size)],
    )))
  } else {
    let u = this.word.size;
    let ptr-size = add-int(mul-int(u, 2), initial-buffer-size);
    let ptr = malloc(C-Size(ptr-size));
    this.memory.store-int(0, ptr);
    _read-inner(from, ptr, 0, initial-buffer-size, r)
  }
}
