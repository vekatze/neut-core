import {
  this.box,
  this.control {grow},
  this.dictionary {dictionary, insert, lookup},
  this.either {Left, Right},
  this.int.io {print-int-line},
  this.int.ord,
  this.ord {ord},
  this.random {random-int},
  this.unit {Unit, unit},
}

define make-big-dictionary(k: &ord(int)): dictionary(int, int) {
  grow(this.dictionary.empty, 700000, function (acc, _) {
    let key = random-int(1000000);
    let val = random-int(1000000);
    insert(k, acc, key, val)
  })
}

define random-lookup-sum(k: &ord(int), d: &dictionary(int, int)): unit {
  let rsum =
    grow(0, 700000, function (acc, _) {
      let key = random-int(1000000);
      let val on key =
        match lookup(k, d, key) {
        | Left(_) =>
          0
        | Right(v) =>
          *v
        };
      let _ = key;
      add-int(acc, val)
    });
  print-int-line(rsum)
}

define main(): unit {
  pin k = this.int.ord.as-ord;
  let big-dictionary = make-big-dictionary(k);
  let _ on big-dictionary = random-lookup-sum(k, big-dictionary);
  let _ = big-dictionary;
  Unit
}
