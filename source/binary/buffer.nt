import {
  this.binary {binary, binary-length},
  this.buffer {_write, buffer, flush, make-buffer},
  this.either {right-unit},
  this.file.descriptor {stdout},
  this.system {system},
  this.text {to-binary},
  this.unit {Unit, unit},
}

define write-binary<r := right-unit>(b: &buffer, content: &binary): system(unit) {
  _write(
    b,
    this.binary._get-content-pointer(content),
    binary-length(content),
    r,
  )
}

define zen(): unit {
  let !k = make-buffer(stdout, 0);
  let _ = !k;
  let _ = !k;
  pin k = !k;
  let _: system(unit) = {
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    try _ = write-binary(k, to-binary("hello\n"));
    flush(k)
  };
  Unit
}
