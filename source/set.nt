import {
  this.bool {False, True, bool},
  this.dictionary {dictionary},
  this.either {Left, Right},
  this.ord {ord},
  this.unit {Unit, unit},
}

data set(a) {
| _Set(dictionary(a, unit))
}

define empty<a>: set(a) {
  _Set(this.dictionary.empty)
}

define singleton<a>(x: a): set(a) {
  _Set(this.dictionary.singleton(x, Unit))
}

define insert<a>(k: &ord(a), s: set(a), x: a): set(a) {
  let _Set(s) = s in
  _Set(this.dictionary.insert(k, s, x, Unit))
}

define delete<a>(k: &ord(a), s: set(a), x: a): set(a) {
  let _Set(s) = s in
  _Set(this.dictionary.delete(k, s, x))
}

define member<a>(k: &ord(a), s: &set(a), x: &a): bool {
  tie _Set(s) = s in
  match this.dictionary.lookup(k, s, x) {
  | Right(_) =>
    True
  | Left(_) =>
    False
  }
}
