import {
  this.bool,
  this.either {Right, right-unit},
  this.file.descriptor {descriptor, stdout},
  this.system {report-system-error, system},
  this.text,
  this.text.io {print},
  this.unit {Unit, unit},
}

foreign {
  neut_core_v0_51_write_double(int32, float, int): int,
  neut_core_v0_51_write_double_line(int32, float, int): int,
}

define write-float<r := right-unit>(d: descriptor, x: float, decimals: int): system(unit) {
  let d' = magic cast(descriptor, int32, d);
  let result = magic external neut_core_v0_51_write_double(d', x, decimals);
  if lt-int(result, 0) {
    try _ = r;
    report-system-error()
  } else {
    try _ = r;
    Right(Unit)
  }
}

define write-float-line<r := right-unit>(d: descriptor, x: float, decimals: int): system(unit) {
  let d' = magic cast(descriptor, int32, d);
  let result = magic external neut_core_v0_51_write_double_line(d', x, decimals);
  if lt-int(result, 0) {
    try _ = r;
    report-system-error()
  } else {
    try _ = r;
    Right(Unit)
  }
}

define print-float(x: float, decimals: int): unit {
  let _ = write-float(stdout, x, decimals);
  Unit
}

define print-float-line(x: float, decimals): unit {
  let _ = write-float-line(stdout, x, decimals);
  Unit
}

define zen(): unit {
  print-float(1234.56789, 2);
  print("\n");
  print-float-line(123.45, 7)
}
