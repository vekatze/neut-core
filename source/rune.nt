import {
  this.bool {and},
  this.either {Left, Right},
  this.memory {load-int8, store-int8},
  this.pointer {shift},
  this.unit {Unit},
}

define to-int32(r: rune): int32 {
  magic cast(rune, int32, r)
}

define to-int(r: rune): int {
  zext-int32-int(to-int32(r))
}

define unsafe-from-int32(r: int32): rune {
  magic cast(int32, rune, r)
}

define size(c: rune): int {
  let c = to-int32(c);
  if and(ule-int32(0x00, c), ule-int32(c, 0x7f)) {
    1
  } else-if and(ule-int32(0xc280, c), ule-int32(c, 0xdfbf)) {
    2
  } else-if and(ule-int32(0xe08080, c), ule-int32(c, 0xefbfbf)) {
    3
  } else-if and(ule-int32(0xf0808080, c), ule-int32(c, 0xf4bfbfbf)) {
    4
  } else {
    3
  }
}

define size-by-head-byte(head-byte: int8): int {
  if eq-int8(and-int8(head-byte, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    1
  } else-if eq-int8(and-int8(head-byte, 0xe0), 0xc0) {
    // 0xc0 = 1100 0000
    // 0xe0 = 1110 0000
    2
  } else-if eq-int8(and-int8(head-byte, 0xf0), 0xe0) {
    // 0xe0 = 1110 0000
    // 0xf0 = 1111 0000
    3
  } else-if eq-int8(and-int8(head-byte, 0xf8), 0xf0) {
    // 0xf0 = 1111 0000
    // 0xf8 = 1111 1000
    4
  } else {
    // unicode invalid char (or panic?)
    3
  }
}

define store-rune(value: rune, address: pointer): int {
  let s = size(value);
  let value = to-int32(value);
  match s {
  | 1 =>
    let piece-0 = trunc-int32-int8(value);
    store-int8(piece-0, shift(address, 0));
    1
  | 2 =>
    let value = trunc-int32-int16(value);
    let piece-0 = trunc-int16-int8(lshr-int16(and-int16(0b_1111_1111_0000_0000, value), 8));
    let piece-1 = trunc-int16-int8(lshr-int16(and-int16(0b_0000_0000_1111_1111, value), 0));
    store-int8(piece-0, shift(address, 0));
    store-int8(piece-1, shift(address, 1));
    2
  | 3 =>
    let value = trunc-int32-int24(value);
    let piece-0 = trunc-int24-int8(lshr-int24(and-int24(0b_1111_1111_0000_0000_0000_0000, value), 16));
    let piece-1 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_1111_1111_0000_0000, value), 8));
    let piece-2 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_0000_0000_1111_1111, value), 0));
    store-int8(piece-0, shift(address, 0));
    store-int8(piece-1, shift(address, 1));
    store-int8(piece-2, shift(address, 2));
    3
  | 4 =>
    let piece-0 = trunc-int32-int8(lshr-int32(and-int32(0b_1111_1111_0000_0000_0000_0000_0000_0000, value), 24));
    let piece-1 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_1111_1111_0000_0000_0000_0000, value), 16));
    let piece-2 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_1111_1111_0000_0000, value), 8));
    let piece-3 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_0000_0000_1111_1111, value), 0));
    store-int8(piece-0, shift(address, 0));
    store-int8(piece-1, shift(address, 1));
    store-int8(piece-2, shift(address, 2));
    store-int8(piece-3, shift(address, 3));
    4
  | _ =>
    // unreachable
    0
  }
}

inline load-rune(address: pointer): rune {
  let x0 = load-int8(address);
  if eq-int8(and-int8(x0, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    magic cast(int8, rune, x0)
  } else-if eq-int8(and-int8(x0, 0xe0), 0xc0) {
    // 0xc0 = 1100 0000
    // 0xe0 = 1110 0000
    let x1 = load-int8(shift(address, 1));
    let x0' = shl-int32(magic cast(int8, int32, x0), 8);
    let x1' = shl-int32(magic cast(int8, int32, x1), 0);
    unsafe-from-int32(or-int32(x0', x1'))
  } else-if eq-int8(and-int8(x0, 0xf0), 0xe0) {
    // 0xe0 = 1110 0000
    // 0xf0 = 1111 0000
    let x1 = load-int8(shift(address, 1));
    let x2 = load-int8(shift(address, 2));
    let x0' = shl-int32(magic cast(int8, int32, x0), 16);
    let x1' = shl-int32(magic cast(int8, int32, x1), 8);
    let x2' = shl-int32(magic cast(int8, int32, x2), 0);
    unsafe-from-int32(or-int32(or-int32(x0', x1'), x2'))
  } else-if eq-int8(and-int8(x0, 0xf8), 0xf0) {
    // 0xf0 = 1111 0000
    // 0xf8 = 1111 1000
    let x1 = load-int8(shift(address, 1));
    let x2 = load-int8(shift(address, 2));
    let x3 = load-int8(shift(address, 3));
    let x0' = shl-int32(magic cast(int8, int32, x0), 24);
    let x1' = shl-int32(magic cast(int8, int32, x1), 16);
    let x2' = shl-int32(magic cast(int8, int32, x2), 8);
    let x3' = shl-int32(magic cast(int8, int32, x3), 0);
    unsafe-from-int32(or-int32(or-int32(or-int32(x0', x1'), x2'), x3'))
  } else {
    // unicode invalid char (or panic?)
    unsafe-from-int32(0xefbfbe)
  }
}

define from-int(value: int): ?rune {
  if le-int(0, value) {
    if le-int(value, 0x80) {
      Right(magic cast(int, rune, value))
    } else-if le-int(value, 0x07ff) {
      let mask-X = 0b_1100_0000_1000_0000;
      let mask-0 = 0b_0000_0111_1100_0000;
      let mask-1 = 0b_0000_0000_0011_1111;
      let value = trunc-int-int16(value);
      let value-0 = and-int16(mask-0, value);
      let value-1 = and-int16(mask-1, value);
      let value-0' = shl-int16(value-0, 2);
      Right(magic cast(int16, rune, or-int16(or-int16(mask-X, value-0'), value-1)))
    } else-if le-int(value, 0xffff) {
      let mask-X = 0b_1110_0000_1000_0000_1000_0000;
      let mask-0 = 0b_0000_0000_1111_0000_0000_0000;
      let mask-1 = 0b_0000_0000_0000_1111_1100_0000;
      let mask-2 = 0b_0000_0000_0000_0000_0011_1111;
      let value = trunc-int-int24(value);
      let value-0 = and-int24(mask-0, value);
      let value-1 = and-int24(mask-1, value);
      let value-2 = and-int24(mask-2, value);
      let value-0' = shl-int24(value-0, 4);
      let value-1' = shl-int24(value-1, 2);
      Right(magic cast(int24, rune, or-int24(or-int24(or-int24(mask-X, value-0'), value-1'), value-2)))
    } else-if le-int(value, 0x10ffff) {
      let mask-X: int32 = 0b_1111_0000_1000_0000_1000_0000_1000_0000;
      let mask-0: int32 = 0b_0000_0000_0001_1100_0000_0000_0000_0000;
      let mask-1: int32 = 0b_0000_0000_0000_0011_1111_0000_0000_0000;
      let mask-2: int32 = 0b_0000_0000_0000_0000_0000_1111_1100_0000;
      let mask-3: int32 = 0b_0000_0000_0000_0000_0000_0000_0011_1111;
      let value = trunc-int-int32(value);
      let value-0 = and-int32(mask-0, value);
      let value-1 = and-int32(mask-1, value);
      let value-2 = and-int32(mask-2, value);
      let value-3 = and-int32(mask-3, value);
      let value-0' = shl-int32(value-0, 6);
      let value-1' = shl-int32(value-1, 4);
      let value-2' = shl-int32(value-2, 2);
      Right(
        magic cast(
          int32,
          rune,
          or-int32(
            or-int32(or-int32(or-int32(mask-X, value-0'), value-1'), value-2'),
            value-3,
          ),
        ),
      )
    } else {
      Left(Unit)
    }
  } else {
    Left(Unit)
  }
}
