import {
  E,
  this.bool {False},
  this.either {Left, Right, either},
  this.eq {Eq, eq},
}

inline as-eq<a, b>(f: eq(a), g: eq(b)): eq(either(a, b)) {
  Eq of {
    equal = {
      function (p1, p2) {
        match p1, p2 {
        | Left(l1), Left(l2) =>
          let Eq of {equal} = f in
          equal(l1, l2)
        | Right(r1), Right(r2) =>
          let Eq of {equal} = g in
          equal(r1, r2)
        | _, _ =>
          False
        }
      }
    },
  }
}

inline as-eq-N<a, b>(f: eq(&a), g: eq(&b)): eq(&either(a, b)) {
  Eq of {
    equal = {
      function (p1, p2) {
        case p1, p2 {
        | Left(l1), Left(l2) =>
          let Eq of {equal} = f in
          equal(l1, l2)
        | Right(r1), Right(r2) =>
          let Eq of {equal} = g in
          equal(r1, r2)
        | _, _ =>
          False
        }
      }
    },
  }
}
