import {
  Ext,
  Magic,
  Mem,
  Word,
  this.bool {False, True, and, bool, not},
  this.box,
  this.c-size {C-Size},
  this.control {grow, loop},
  this.either {Left, Right, either, from-right, none},
  this.external {free, malloc},
  this.function {compose},
  this.int {abs-int, max-int, min-int},
  this.int.ord {as-ord-N},
  this.int.show {show-int},
  this.list {Cons, Nil, list, minimum},
  this.magic,
  this.memory {store-int},
  this.pair {Pair, pair},
  this.pointer {shift},
  this.text {replicate, text},
  this.text.io {print, printf},
  this.trick,
  this.unit {Unit, unit},
  this.word,
}

data _vector-info {
| _Vector-Info(
    capacity: int,
    from: int,
    to: int,
    elem-type: type,
    content-ptr: pointer,
  )
}

nominal {
  _vector-internal: type,
}

// (capacity: int, from: int, to: int, elem-type: type, ptr-to-buffer: pointer)
data vector(_: type) {
| _Vector(_vector-internal)
}

inline get-capacity<a>(xs: &vector(a)): int {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.load-int(vector-ptr)
}

inline _get-from<a>(xs: &vector(a)): int {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.load-int(shift(vector-ptr, Word.size))
}

inline _get-to<a>(xs: &vector(a)): int {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.load-int(shift(vector-ptr, mul-int(Word.size, 2)))
}

inline _get-elem-type<a>(xs: &vector(a)): type {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Magic.cast(int, type, Mem.load-int(shift(vector-ptr, mul-int(Word.size, 3))))
}

inline _set-elem-type<a>(xs: &vector(a), b: type): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.store-int(Magic.cast(type, int, b), shift(vector-ptr, mul-int(Word.size, 3)))
}

inline _get-buffer-ptr<a>(xs: &vector(a)): pointer {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.load-pointer(shift(vector-ptr, mul-int(Word.size, 4)))
}

define _set-buffer-ptr<a>(xs: &vector(a), buffer-ptr: pointer): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.store-pointer(buffer-ptr, shift(vector-ptr, mul-int(Word.size, 4)))
}

define _set-capacity<a>(xs: &vector(a), capacity: int): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.store-int(capacity, vector-ptr)
}

define _get-element-pointer<a>(xs: &vector(a), index: int): pointer {
  let from = _get-from(xs) in
  let buffer-ptr = _get-buffer-ptr(xs) in
  shift(buffer-ptr, mul-int(Word.size, add-int(from, index)))
}

define length<a>(xs: &vector(a)): int {
  let from = _get-from(xs) in
  let to = _get-to(xs) in
  sub-int(to, from)
}

inline _shift-from<a>(xs: &vector(a), offset: int): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  let from-ptr = shift(vector-ptr, mul-int(Word.size, 1)) in
  let current-value = Mem.load-int(from-ptr) in
  Mem.store-int(add-int(current-value, offset), from-ptr)
}

inline _shift-to<a>(xs: &vector(a), offset: int): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  let to-ptr = shift(vector-ptr, mul-int(Word.size, 2)) in
  let current-value = Mem.load-int(to-ptr) in
  Mem.store-int(add-int(current-value, offset), to-ptr)
}

inline _set-from<a>(xs: &vector(a), from: int): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.store-int(from, shift(vector-ptr, Word.size))
}

inline _set-to<a>(xs: &vector(a), to: int): unit {
  let vector-ptr = Magic.cast(&vector(a), pointer, xs) in
  Mem.store-int(to, shift(vector-ptr, mul-int(Word.size, 2)))
}

define make<a>(initial-capacity: int): vector(a) {
  let abs-capacity = abs-int(initial-capacity) in
  let word-size = Word.size in
  let vector-ptr = malloc(C-Size(mul-int(word-size, 5))) in
  let buffer-ptr = malloc(C-Size(mul-int(word-size, abs-capacity))) in
  let initial-cursor = match gt-int(initial-capacity, 0) {True => 0 | False => abs-capacity} in
  Mem.store-int(abs-capacity, vector-ptr);
  Mem.store-int(initial-cursor, shift(vector-ptr, mul-int(word-size, 1)));
  Mem.store-int(initial-cursor, shift(vector-ptr, mul-int(word-size, 2)));
  Mem.store-int(Magic.cast(type, int, a), shift(vector-ptr, mul-int(word-size, 3)));
  Mem.store-pointer(buffer-ptr, shift(vector-ptr, mul-int(word-size, 4)));
  magic cast(pointer, vector(a), vector-ptr)
}

define _discard-vector-content<a>(xs: &vector(a), elem-type: type, index: int, len: int): unit {
  if eq-int(index, len) {
    Unit
  } else {
    let element-ptr = _get-element-pointer(xs, index) in
    let _ = Magic.cast(int, elem-type, Mem.load-int(element-ptr)) in
    _discard-vector-content(xs, elem-type, add-int(index, 1), len)
  }
}

define _copy-vector-content(
  xs: &vector(pointer),
  ys: &vector(pointer),
  elem-type: type,
  index: int,
  len: int,
): unit {
  if eq-int(index, len) {
    Unit
  } else {
    let source-ptr = _get-element-pointer(xs, index) in
    let target-ptr = _get-element-pointer(ys, index) in
    let original = Magic.cast(int, &elem-type, Mem.load-int(source-ptr)) in
    let clone = *original in
    Mem.store-int(Magic.cast(elem-type, int, clone), target-ptr);
    _copy-vector-content(xs, ys, elem-type, add-int(index, 1), len)
  }
}

// (capacity: int, from: int, to: int, elem-type: type, ptr-to-buffer: pointer)
resource _vector-internal {
  function (xs: &vector(pointer)) {
    let len = length(xs) in
    let elem-type = _get-elem-type(xs) in
    _discard-vector-content(xs, elem-type, 0, len);
    free(_get-buffer-ptr(xs));
    free(Magic.cast(&vector(pointer), pointer, xs))
  },
  function (xs: &vector(pointer)) {
    let capacity = get-capacity(xs) in
    let ys: &vector(pointer) = Magic.cast(vector(pointer), &vector(pointer), make(capacity)) in
    let elem-type = _get-elem-type(xs) in
    let from = _get-from(xs) in
    let to = _get-to(xs) in
    let len = length(xs) in
    _set-from(ys, from);
    _set-to(ys, to);
    _set-elem-type(ys, elem-type);
    _copy-vector-content(xs, ys, elem-type, 0, len);
    ys
  },
}

foreign {
  llvm.memmove.p0.p0.i64(pointer, pointer, int64, int1): void,
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

inline _extend-factor: int {
  2
}

define _extend-front<a>(xs: vector(a)): vector(a) {
  let current-capacity on xs = max-int(get-capacity(xs), 1) in
  let new-capacity = mul-int(current-capacity, _extend-factor) in
  let buffer-ptr on xs = _get-buffer-ptr(xs) in
  let new-buffer-ptr = Ext.realloc(buffer-ptr, C-Size(mul-int(Word.size, new-capacity))) in
  let new-head-ptr = shift(new-buffer-ptr, mul-int(Word.size, current-capacity)) in
  let _ = magic external llvm.memcpy.p0.p0.i64(new-head-ptr, new-buffer-ptr, mul-int(Word.size, current-capacity), 0) in
  let _ on xs =
    _shift-from(xs, current-capacity);
    _shift-to(xs, current-capacity);
    _set-buffer-ptr(xs, new-buffer-ptr);
    _set-capacity(xs, new-capacity)
  in
  xs
}

define _extend-back<a>(xs: vector(a)): vector(a) {
  let current-capacity on xs = max-int(get-capacity(xs), 1) in
  let new-capacity = mul-int(current-capacity, _extend-factor) in
  let buffer-ptr on xs = _get-buffer-ptr(xs) in
  let new-buffer-ptr = Ext.realloc(buffer-ptr, C-Size(mul-int(Word.size, new-capacity))) in
  let _ on xs =
    _set-buffer-ptr(xs, new-buffer-ptr);
    _set-capacity(xs, new-capacity)
  in
  xs
}

define push-front<a>(xs: vector(a), x: a): vector(a) {
  let from on xs = _get-from(xs) in
  if gt-int(from, 0) {
    let new-element-ptr on xs = _get-element-pointer(xs, -1) in
    store-int(Magic.cast(a, int, x), new-element-ptr);
    let _ on xs = _shift-from(xs, -1) in
    xs
  } else {
    let xs = _extend-front(xs) in
    push-front(xs, x)
  }
}

define push-back<a>(xs: vector(a), x: a): vector(a) {
  let capacity on xs = get-capacity(xs) in
  let to on xs = _get-to(xs) in
  if lt-int(to, capacity) {
    let len on xs = length(xs) in
    let new-element-ptr on xs = _get-element-pointer(xs, len) in
    store-int(Magic.cast(a, int, x), new-element-ptr);
    let _ on xs = _shift-to(xs, 1) in
    xs
  } else {
    let xs' = _extend-back(xs) in
    push-back(xs', x)
  }
}

inline pop-front<a>(xs: vector(a)): ?pair(a, vector(a)) {
  let len on xs = length(xs) in
  if eq-int(len, 0) {
    none
  } else {
    let first-value-pointer on xs = _get-element-pointer(xs, 0) in
    let first-value = Magic.cast(int, a, Mem.load-int(first-value-pointer)) in
    let _ on xs = _shift-from(xs, 1) in
    Right(Pair(first-value, xs))
  }
}

inline pop-back<a>(xs: vector(a)): ?pair(vector(a), a) {
  let len on xs = length(xs) in
  if eq-int(len, 0) {
    none
  } else {
    let last-value-pointer on xs = _get-element-pointer(xs, sub-int(len, 1)) in
    let last-value = Magic.cast(int, a, Mem.load-int(last-value-pointer)) in
    let _ on xs = _shift-to(xs, -1) in
    Right(Pair(xs, last-value))
  }
}

inline _access<a>(xs: &vector(a), i: int): &a {
  let element-pointer = _get-element-pointer(xs, i) in
  Magic.cast(int, &a, Mem.load-int(element-pointer))
}

inline access<a>(xs: &vector(a), i: int): ?&a {
  if and(le-int(0, i), lt-int(i, length(xs))) {
    Right(_access(xs, i))
  } else {
    none
  }
}

inline fold-left-N<elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  !consumer: (result-type, &elem-type, int) -> result-type,
): result-type {
  let sz = length(xs) in
  let helper =
    define loop(cursor: int, acc, xs) {
      if eq-int(cursor, sz) {
        acc
      } else {
        let y = _access(xs, cursor) in
        loop(add-int(cursor, 1), !consumer(acc, y, cursor), xs)
      }
    }
  in
  helper(0, acc, xs)
}

inline fold-left-reverse-N<elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  !consumer: (result-type, &elem-type, int) -> result-type,
): result-type {
  let sz = core.vector.length(xs) in
  let helper =
    define loop(cursor: int, acc: result-type, xs: &vector(elem-type)): result-type {
      if lt-int(cursor, 0) {
        acc
      } else {
        let y = core.vector._access(xs, cursor) in
        loop(sub-int(cursor, 1), !consumer(acc, y, cursor), xs)
      }
    }
  in
  helper(sub-int(sz, 1), acc, xs)
}

inline fold-left-EN<e, elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  !consumer: (result-type, &elem-type, int) -> either(e, result-type),
): either(e, result-type) {
  let sz = length(xs) in
  let helper =
    define loop(cursor: int, acc, xs) {
      if eq-int(cursor, sz) {
        Right(acc)
      } else {
        let y = _access(xs, cursor) in
        try v = !consumer(acc, y, cursor) in
        loop(add-int(cursor, 1), v, xs)
      }
    }
  in
  helper(0, acc, xs)
}

inline for-each<a, b>(xs: vector(a), !f: (a, int) -> b): vector(b) {
  let _ on xs = _set-elem-type(xs, b) in
  let len on xs = length(xs) in
  let update-values =
    define self(xs: vector(a), index: int): vector(a) {
      if ge-int(index, len) {
        xs
      } else {
        let element-ptr on xs = _get-element-pointer(xs, index) in
        let old-value = Magic.cast(int, a, Mem.load-int(element-ptr)) in
        let new-element-ptr = Magic.cast(b, int, !f(old-value, index)) in
        Mem.store-int(new-element-ptr, element-ptr);
        self(xs, add-int(index, 1))
      }
    }
  in
  Magic.cast(vector(a), vector(b), update-values(xs, 0))
}

inline for-each-N<a, b>(xs: &vector(a), f: (&a, int) -> b): vector(b) {
  let capacity = get-capacity(xs) in
  fold-left-N(make(capacity), xs, function (acc, x, i) {
    push-back(acc, f(x, i))
  })
}

inline for<a>(xs: vector(a), !f: (a, int) -> unit): unit {
  let len on xs = length(xs) in
  let loop =
    define self(xs: vector(a), index: int): unit {
      if ge-int(index, len) {
        let buffer-ptr on xs = _get-buffer-ptr(xs) in
        free(buffer-ptr);
        free(Magic.cast(vector(a), pointer, xs))
      } else {
        let element-ptr on xs = _get-element-pointer(xs, index) in
        let old-value = Magic.cast(int, a, Mem.load-int(element-ptr)) in
        !f(old-value, index);
        self(xs, add-int(index, 1))
      }
    }
  in
  loop(xs, 0)
}

inline for-N<a>(xs: &vector(a), f: (&a, int) -> unit): unit {
  fold-left-N(Unit, xs, function (_, x, i) {
    f(x, i)
  })
}

define for-each-vertical<a, b>(xs: vector(a), col-size: int, !f: (a, int) -> b): vector(b) {
  assert "core.vector.for-each-vertical: col-size > 0" {
    gt-int(col-size, 0)
  };
  let _ on xs = _set-elem-type(xs, b) in
  let vec-size on xs = length(xs) in
  let store-values =
    define self(xs: vector(a), index: int): vector(a) {
      if ge-int(index, vec-size) {
        xs
      } else {
        let value-ptr on xs = _get-element-pointer(xs, index) in
        let old-value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        let new-value-ptr = Magic.cast(b, int, !f(old-value, index)) in
        Mem.store-int(new-value-ptr, value-ptr);
        let next-index-cand = add-int(index, col-size) in
        if lt-int(next-index-cand, vec-size) {
          self(xs, next-index-cand)
        } else {
          let current-column = rem-int(index, col-size) in
          let next-column = add-int(current-column, 1) in
          if ge-int(next-column, col-size) {
            xs
          } else {
            self(xs, next-column)
          }
        }
      }
    }
  in
  Magic.cast(vector(a), vector(b), store-values(xs, 0))
}

inline zip-with-N<a, b, c>(xs: &vector(a), ys: &vector(b), f: (&a, &b, int) -> c): vector(c) {
  let len1 = length(xs) in
  let len2 = length(ys) in
  let min-func = minimum(as-ord-N) in
  let len-or-none = min-func([len1, len2]) in
  let len = from-right(len-or-none, 0) in
  let result = make(len) in
  grow(result, len, function (acc, i) {
    let val1 = _access(xs, i) in
    let val2 = _access(ys, i) in
    push-back(acc, f(val1, val2, i))
  })
}

define from-list<a>(base-list: list(a)): vector(a) {
  let len on base-list = this.list.length(base-list) in
  this.list.fold-left(make(len), base-list, function (acc, x) {
    push-back(acc, x)
  })
}

define to-list<a>(xs: vector(a)): list(a) {
  let len on xs = length(xs) in
  let loop =
    define self(xs: vector(a), index: int): list(a) {
      if ge-int(index, len) {
        let buffer-ptr on xs = _get-buffer-ptr(xs) in
        let vector-ptr = Magic.cast(vector(a), pointer, xs) in
        Ext.free(buffer-ptr);
        Ext.free(vector-ptr);
        Nil
      } else {
        let value-ptr on xs = _get-element-pointer(xs, index) in
        let value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        Cons(value, self(xs, add-int(index, 1)))
      }
    }
  in
  loop(xs, 0)
}

define exchange<a>(xs: vector(a), index: int, value: a): either(vector(a), pair(a, vector(a))) {
  let len on xs = length(xs) in
  if and(le-int(0, index), lt-int(index, len)) {
    let value-ptr on xs = _get-element-pointer(xs, index) in
    let old-value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
    Mem.store-int(Magic.cast(a, int, value), value-ptr);
    Right(Pair(old-value, xs))
  } else {
    Left(xs)
  }
}

define _swap<a>(xs: vector(a), i: int, j: int): vector(a) {
  let value-i-ptr on xs = _get-element-pointer(xs, i) in
  let value-j-ptr on xs = _get-element-pointer(xs, j) in
  let value-i = Mem.load-int(value-i-ptr) in
  let value-j = Mem.load-int(value-j-ptr) in
  Mem.store-int(value-j, value-i-ptr);
  Mem.store-int(value-i, value-j-ptr);
  xs
}

define swap<a>(xs: vector(a), i: int, j: int): vector(a) {
  let len on xs = length(xs) in
  let b1 = and(le-int(0, i), lt-int(i, len)) in
  let b2 = and(le-int(0, j), lt-int(j, len)) in
  if and(b1, b2) {
    _swap(xs, i, j)
  } else {
    xs
  }
}

define reverse<a>(xs: vector(a)): vector(a) {
  let len on xs = core.vector.length(xs) in
  let f =
    define self(xs: vector(a), left: int, right: int): vector(a) {
      if ge-int(left, right) {
        xs
      } else {
        let xs = swap(xs, left, right) in
        self(xs, add-int(left, 1), sub-int(right, 1))
      }
    }
  in
  f(xs, 0, sub-int(len, 1))
}

define take<a>(xs: vector(a), n: int): vector(a) {
  let _ on xs =
    let len = core.vector.length(xs) in
    let n = max-int(0, n) in
    loop(sub-int(len, n), function (i) {
      let v = core.vector._access(xs, add-int(i, n)) in
      let _ = Magic.cast(&a, a, v) in
      Unit
    });
    let from = _get-from(xs) in
    let to = _get-to(xs) in
    _set-to(xs, min-int(to, add-int(from, n)))
  in
  xs
}

define drop<a>(xs: vector(a), n: int): vector(a) {
  let _ on xs =
    let n = min-int(max-int(0, n), length(xs)) in
    loop(n, function (i) {
      let v = core.vector._access(xs, i) in
      let _ = Magic.cast(&a, a, v) in
      Unit
    });
    _shift-from(xs, n)
  in
  xs
}

define slice<a>(xs: vector(a), from: int, to: int): vector(a) {
  let ys = drop(xs, from) in
  take(ys, sub-int(to, from))
}

define take-end<a>(xs: vector(a), n: int): vector(a) {
  let len on xs = core.vector.length(xs) in
  drop(xs, sub-int(len, n))
}

define drop-end<a>(xs: vector(a), n: int): vector(a) {
  let len on xs = core.vector.length(xs) in
  take(xs, sub-int(len, n))
}

define delete<a>(xs: vector(a), index: int): vector(a) {
  let len on xs = length(xs) in
  if eq-int(0, index) {
    drop(xs, 1)
  } else-if eq-int(index, sub-int(len, 1)) {
    drop-end(xs, 1)
  } else-if and(lt-int(0, index), lt-int(index, sub-int(len, 1))) {
    let value-ptr on xs = _get-element-pointer(xs, index) in
    let _ = Magic.cast(int, a, Mem.load-int(value-ptr)) in
    let pivot = div-int(len, 2) in
    if lt-int(index, pivot) {
      let source-ptr on xs = _get-element-pointer(xs, 0) in
      let target-ptr on xs = _get-element-pointer(xs, 1) in
      let copy-bytes = mul-int(Word.size, index) in
      let _ = magic external llvm.memmove.p0.p0.i64(target-ptr, source-ptr, copy-bytes, 0) in
      let _ on xs = _shift-from(xs, 1) in
      xs
    } else {
      let next-value-index = add-int(index, 1) in
      let source-ptr on xs = _get-element-pointer(xs, next-value-index) in
      let target-ptr = value-ptr in
      let copy-bytes = mul-int(Word.size, sub-int(len, next-value-index)) in
      let _ = magic external llvm.memmove.p0.p0.i64(target-ptr, source-ptr, copy-bytes, 0) in
      let _ on xs = _shift-to(xs, -1) in
      xs
    }
  } else {
    xs
  }
}

define find<a>(xs: &vector(a), !pred: (&a) -> bool): int {
  let len = length(xs) in
  let f =
    define self(index: int): int {
      if ge-int(index, len) {
        -1
      } else {
        let value = _access(xs, index) in
        if !pred(value) {
          index
        } else {
          self(add-int(index, 1))
        }
      }
    }
  in
  f(0)
}

define find-end<a>(xs: &vector(a), !pred: (&a) -> bool): int {
  let len = length(xs) in
  let f =
    define self(index: int): int {
      if lt-int(index, 0) {
        -1
      } else {
        let value = _access(xs, index) in
        if !pred(value) {
          index
        } else {
          self(sub-int(index, 1))
        }
      }
    }
  in
  f(sub-int(len, 1))
}

define take-while<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find(xs, compose(not, !pred)) in
  if lt-int(pivot-index, 0) {
    xs
  } else {
    take(xs, pivot-index)
  }
}

define drop-while<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find(xs, compose(not, !pred)) in
  if lt-int(pivot-index, 0) {
    make(1)
  } else {
    drop(xs, pivot-index)
  }
}

define take-while-end<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find-end(xs, compose(not, !pred)) in
  if lt-int(pivot-index, 0) {
    xs
  } else {
    drop(xs, add-int(pivot-index, 1))
  }
}

define drop-while-end<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find-end(xs, compose(not, !pred)) in
  if lt-int(pivot-index, 0) {
    make(0)
  } else {
    take(xs, add-int(pivot-index, 1))
  }
}

define zen(): unit {
  let xs: vector(text) = make(0) in
  let xs = push-back(xs, *"b") in
  let xs = push-front(xs, *"a") in
  let xs = push-front(xs, *"c") in
  let !xs = drop(xs, 2) in
  let _ = !xs in
  let _ = !xs in
  let _ = !xs in
  let xs = push-front(!xs, *"d") in
  let xs = push-back(xs, *"e") in
  let xs = push-front(xs, *"f") in
  let xs = push-back(xs, *"g") in
  let xs = push-front(xs, *"h") in
  let !xs = xs in
  // let !xs = drop(xs, 3) in
  let _ = !xs in
  // let !xs = drop(!xs, 3) in
  let _ = !xs in
  let _ = !xs in
  let _ = push-front(!xs, *"foo") in
  let _ = !xs in
  let _ = !xs in
  let _ = !xs in
  // let xs = push-back(xs, 7) in
  // let xs = push-back(xs, 8) in
  // let xs = push-back(xs, 9) in
  // let xs = push-back(xs, 10) in
  // let xs = take(xs, 5) in
  // let !xs = delete(xs, 0) in
  // let _ = !xs in
  // let _ = !xs in
  // let _ = !xs in
  // let _ = !xs in
  pin xs = !xs in
  let ys: vector(int) = from-list(to-list(from-list([1, 2, 3, 4, 5]))) in
  pin ys = ys in
  let zs =
    zip-with-N(xs, ys, function (x, y, _) {
      replicate(x, *y)
    })
  in
  let !zs = delete(reverse(zs), 100) in
  let _ = !zs in
  let _ = !zs in
  match pop-back(!zs) {
  | Left(_) =>
    print("left\n")
  | Right(Pair(!rest, z)) =>
    let _ = !rest in
    let _ = !rest in
    let len on !rest = length(!rest) in
    let _ = !rest in
    printf("right. last-elem = {}\n", [z]);
    printf("right. len = {}\n", [show-int(len)])
  };
  pin zs = !zs in
  // let mini-zs =
  //   drop-while-end(*zs, function (x) {
  //     gt-int(*x, 10000)
  //   })
  // in
  // let _ =
  //   for-each-vertical(drop(*xs, 3), 3, function (x, _) {
  //     printf("{}, ", [show-int(x)])
  //   })
  // in
  for(*zs, function (x, _) {
    printf("{}, ", [x])
  });
  print("\n----\n");
  for(!xs, function (x, _) {
    printf("{}, ", [x])
  });
  print("\n")
  // let capacity = get-capacity(zs) in
  // printf("num of items: {}\n", [show-int(length(zs))]);
  // printf("capacity: {}\n", [show-int(capacity)])
}
