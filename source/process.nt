import {
  this.bool {bool},
  this.c-int {c-int, eq-c-int, from-c-int},
  this.c-pid {c-pid, eq-c-pid},
  this.c-size {C-Size},
  this.either {Left, Right},
  this.external {free, malloc},
  this.file {close},
  this.file.descriptor {descriptor, stderr, stdin, stdout},
  this.foreign {_wcoredump, _wexitstatus, _wifexited, _wifsignaled, _wifstopped, _wstopsig, _wtermsig},
  this.int.io {print-int-line},
  this.list {Cons, fold-left-with-index, length, list},
  this.magic,
  this.memory {load-c-int, store-int},
  this.pair {Pair, pair},
  this.pointer {extract, null-pointer, shift},
  this.system {report-system-error, system},
  this.text {_get-content-pointer, text},
  this.text.io {print, print-line, read, write},
  this.unit {Unit, unit},
  this.word,
}

foreign {
  execvp(pointer, pointer): c-int,
  fork(): c-pid,
  waitpid(c-pid, pointer, c-int): c-pid,
  pipe(pointer): c-int,
  dup2(c-int, c-int): c-int,
}

define __waitpid(pid: c-pid, status-ptr: pointer, option: c-int): c-pid {
  magic external waitpid(pid, status-ptr, option)
}

data process-result-status {
| Exited(status: c-int)
| Signaled(termsig: c-int, coredump: bool)
| Stopped(stopsig: c-int)
}

define _waitpid(pid: c-pid): system(process-result-status) {
  let status-ptr = malloc(C-Size(this.word.size));
  let result = __waitpid(pid, status-ptr, 0);
  if eq-c-pid(result, -1) {
    free(status-ptr);
    report-system-error()
  } else {
    let stat-loc = load-c-int(status-ptr);
    free(status-ptr);
    if _wifexited(stat-loc) {
      let exit-status = _wexitstatus(stat-loc);
      Right(Exited(exit-status))
    } else-if _wifsignaled(stat-loc) {
      let termsig = _wtermsig(stat-loc);
      let coredump = _wcoredump(stat-loc);
      Right(Signaled(termsig, coredump))
    } else-if _wifstopped(stat-loc) {
      let stopsig = _wstopsig(stat-loc);
      Right(Stopped(stopsig))
    } else {
      // unreachable
      report-system-error()
    }
  }
}

define _make-argv(xs: list(pointer)): pointer {
  let len on xs = length(xs);
  let ptr = malloc(C-Size(mul-int(this.word.size, len)));
  fold-left-with-index(Unit, xs, function (_, x, i) {
    store-int(extract(x), shift(ptr, mul-int(this.word.size, i)))
  });
  ptr
}

define _create-pipe(): system(pair(descriptor, descriptor)) {
  let ptr = malloc(C-Size(mul-int(this.word.size, 2)));
  let result = magic external pipe(ptr);
  if eq-c-int(result, -1) {
    free(ptr);
    report-system-error()
  } else {
    let reader = this.magic.cast(int32, descriptor, magic load(int32, ptr));
    let writer = this.magic.cast(int32, descriptor, magic load(int32, shift(ptr, 4)));
    free(ptr);
    Right(Pair(reader, writer))
  }
}

define _dup2(fd1: descriptor, fd2: descriptor): system(unit) {
  let fd1 = magic cast(descriptor, c-int, fd1);
  let fd2 = magic cast(descriptor, c-int, fd2);
  let result = magic external dup2(fd1, fd2);
  if eq-c-int(result, -1) {
    report-system-error()
  } else {
    Right(Unit)
  }
}

define _fork(): system(c-pid) {
  let result = magic external fork();
  if eq-c-pid(result, -1) {
    report-system-error()
  } else {
    Right(result)
  }
}

data process-spec {
| Process-Spec(
    process: &text,
    args: list(&text),
    input: &text,
  )
}

data process-result {
| Process-Result(
    status: process-result-status,
    stdout-text: text,
    stderr-text: text,
  )
}

define spawn(
  ps: process-spec,
  stdout-initial-buffer-size: int,
  stderr-initial-buffer-size: int,
): system(process-result) {
  try Pair(in-reader, in-writer) = _create-pipe();
  try Pair(out-reader, out-writer) = _create-pipe();
  try Pair(error-reader, error-writer) = _create-pipe();
  try pid = _fork();
  if eq-c-pid(pid, -1) {
    report-system-error()
  } else-if eq-c-pid(pid, 0) {
    try _ = close(in-writer);
    try _ = close(out-reader);
    try _ = close(error-reader);
    try _ = _dup2(in-reader, stdin);
    try _ = _dup2(out-writer, stdout);
    try _ = _dup2(error-writer, stderr);
    let Process-Spec of {process, args} = ps;
    let raw-args = this.list.for-each(Cons(process, args), _get-content-pointer);
    let cmd-args = _make-argv(this.list.append(raw-args, [null-pointer]));
    let cmd = _get-content-pointer(process);
    let _ = magic external execvp(cmd, cmd-args);
    report-system-error()
  } else {
    try _ = close(in-reader);
    try _ = close(out-writer);
    try _ = close(error-writer);
    let Process-Spec of {input} = ps;
    try _ = write(in-writer, input);
    try _ = close(in-writer);
    try stdout-text = read(out-reader, stdout-initial-buffer-size);
    try stderr-text = read(error-reader, stderr-initial-buffer-size);
    try status = _waitpid(pid);
    Right(Process-Result of {
      status,
      stdout-text,
      stderr-text,
    })
  }
}

define _print-process-result-status(st: process-result-status): unit {
  match st {
  | Exited(status) =>
    print-int-line(from-c-int(status))
  | Signaled(_, _) =>
    Unit
  | Stopped(_) =>
    Unit
  }
}

define zen(): unit {
  let cmd =
    Process-Spec of {
      process = "sh",
      args = ["-c", "ls /"],
      input = "",
    };
  match spawn(cmd, 1024, 1024) {
  | Right(result) =>
    let Process-Result of {stdout-text, stderr-text, status} = result;
    let _ on stdout-text = print(stdout-text);
    let _ on stderr-text = print(stderr-text);
    let _ = stdout-text;
    let _ = stderr-text;
    print("exit-code: ");
    _print-process-result-status(status);
    print-line("success")
  | Left(e) =>
    print("fail: ");
    pin message = this.system.get-error-message(e);
    print(message)
  }
}
