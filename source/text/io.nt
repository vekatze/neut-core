import {
  FD,
  Magic,
  this.binary {binary},
  this.binary.io,
  this.either {Left, Right},
  this.file.descriptor {stdin, stdout},
  this.list {for, list},
  this.pointer {null-pointer},
  this.system {get-error-message, system},
  this.text {_format, _get-content-pointer, text, text-byte-length},
  this.unit {Unit, unit},
}

define write(t: &text, f: FD.descriptor): system(unit) {
  let ptr = Magic.cast(&text, &binary, t) in
  this.binary.io.write(ptr, f)
}

foreign {
  printf(pointer): void,
  fflush(pointer): void,
}

define print(t: &text): unit {
  let fmt = _get-content-pointer("%.*s\0") in
  let len = text-byte-length(t) in
  let val = _get-content-pointer(t) in
  let _ = magic external printf(fmt)(len: int, val: pointer) in
  Unit
}

define printf(fmt: &text, args: list(text)): unit {
  for(_format(fmt, args), function (p) {
    let _ on p = print(p) in
    let _ = p in
    Unit
  })
}

define print-int(x: int): unit {
  let fmt = _get-content-pointer("%ld\0") in
  let _ = magic external printf(fmt)(x: int) in
  Unit
}

define print-line(t: &text): unit {
  let fmt = _get-content-pointer("%.*s\n\0") in
  let len = text-byte-length(t) in
  let val = _get-content-pointer(t) in
  let _ = magic external printf(fmt)(len: int, val: pointer) in
  Unit
}

define print-float(x: float): unit {
  let fmt = _get-content-pointer("%lf\0") in
  let _ = magic external printf(fmt)(x: float) in
  Unit
}

define fflush(ptr: pointer): unit {
  let _ = magic external fflush(ptr) in
  Unit
}

define fflush-all(): unit {
  fflush(null-pointer)
}

define read(from: FD.descriptor, initial-buffer-size: int): system(text) {
  try bin = this.binary.io.read(from, initial-buffer-size) in
  Right(Magic.cast(binary, text, bin))
}

define get-line(initial-buffer-size: int): system(text) {
  read(FD.stdin, initial-buffer-size)
}

define zen(): unit {
  print("hey\n");
  let _ = write("hello.\n", stdout) in
  fflush-all();
  let value = read(stdin, 0) in
  match value {
  | Right(_) =>
    print("success\n")
  | Left(e) =>
    printf("{}\n", [get-error-message(e)])
  }
}
