import {
  this.ansi {Blue, Yellow},
  this.bool,
  this.box,
  this.doc {Chunk, Group, Nest, Seq, ansi-fg, ansi-reset, atom, break, doc, join},
  this.doc.chunk {_layout-chunk, _size-chunk},
  this.doc.doc-kit {
    _Doc-Kit,
    _Horizontal,
    _Vertical,
    _doc-kit,
    _get-column,
    _get-indentation,
    _shift-indentation,
    _with-local-mode,
  },
  this.ref {make-ref},
  this.text {text},
  this.text.io {print-line},
  this.unit {Unit, unit},
}

define _size(target: &doc): int {
  case target {
  | Chunk(c) =>
    _size-chunk(c)
  | Seq(d1, d2) =>
    let s1 = _size(d1);
    let s2 = _size(d2);
    add-int(s1, s2)
  | Nest(_, cont) =>
    _size(cont)
  | Group(d) =>
    _size(d)
  }
}

define _layout(k: &_doc-kit, target: &doc): text {
  case target {
  | Chunk(c) =>
    _layout-chunk(k, c)
  | Seq(d1, d2) =>
    pin t1 = _layout(k, d1);
    pin t2 = _layout(k, d2);
    this.text.append(t1, t2)
  | Nest(i, cont) =>
    _shift-indentation(k, *i);
    let result = _layout(k, cont);
    _shift-indentation(k, mul-int(-1, *i));
    result
  | Group(d) =>
    let s = _size(d);
    tie _Doc-Kit of {width} = k;
    let column = _get-column(k);
    let indentation = _get-indentation(k);
    let ribbon-width = add-int(sub-int(column, indentation), s);
    let fits = lt-int(ribbon-width, *width);
    if fits {
      _with-local-mode(k, _Horizontal, function () {
        _layout(k, d)
      })
    } else {
      _with-local-mode(k, _Vertical, function () {
        _layout(k, d)
      })
    }
  }
}

define show-doc(target: &doc, max-ribbon-width: int): text {
  let column-ref = make-ref(quote {0});
  let indentation-ref = make-ref(quote {0});
  let mode-ref = make-ref(quote {_Horizontal});
  pin k = _Doc-Kit(max-ribbon-width, column-ref, indentation-ref, mode-ref);
  _layout(k, target)
}

define zen(): unit {
  pin item =
    Group(join[
      ansi-fg(Blue),
      atom(*"begin"),
      ansi-reset,
      Nest(2, join[
        break(" "),
        Group(
          join[
            ansi-fg(Yellow),
            atom(*"print;"),
            ansi-reset,
            break(" "),
            atom(*"test;"),
            break(" "),
            atom(*"stmt;"),
          ],
        ),
      ]),
      break(" "),
      ansi-fg(Blue),
      atom(*"end"),
      ansi-reset,
    ]);
  pin item = show-doc(item, 10);
  print-line(item);
  Unit
}
