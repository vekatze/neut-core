import {
  Magic,
  Mem,
  Word,
  this.bool {and, bool, not},
  this.box,
  this.c-size {C-Size},
  this.control {loop},
  this.either {Left, Right, either, from-right, none},
  this.external {free, malloc},
  this.function {compose},
  this.int {max-int, min-int},
  this.int.ord {as-ord-N},
  this.list {Cons, Nil, list, minimum},
  this.magic,
  this.memory,
  this.pair {Pair, pair},
  this.pointer {shift},
  this.text,
  this.trick {panic},
  this.unit {Unit, unit},
  this.word,
}

data _vector-info {
| _Vector-Info(
    word-size: int,
    from-ptr: pointer,
    to-ptr: pointer,
    type-ptr: pointer,
    content-ptr: pointer,
  )
}

define _discard-vector-content(ptr: pointer, elem-type: type, counter: int, size: int): unit {
  if eq-int(counter, size) {
    Unit
  } else {
    let u = Word.size in
    let _ = Magic.cast(int, elem-type, Mem.load-int(shift(ptr, mul-int(counter, u)))) in
    _discard-vector-content(ptr, elem-type, add-int(counter, 1), size)
  }
}

define _copy-vector-content(
  source-pointer: pointer,
  target-pointer: pointer,
  elem-type: type,
  counter: int,
  size: int,
): unit {
  if eq-int(counter, size) {
    Unit
  } else {
    let u = Word.size in
    let original = Magic.cast(int, &elem-type, Mem.load-int(shift(source-pointer, mul-int(counter, u)))) in
    let clone = *original in
    Mem.store-int(Magic.cast(elem-type, int, clone), shift(target-pointer, mul-int(counter, u)));
    _copy-vector-content(source-pointer, target-pointer, elem-type, add-int(counter, 1), size)
  }
}

nominal {
  _vector-internal: type,
}

data vector(_: type) {
| _Vector(_vector-internal)
}

inline _get-vector-info<a>(xs: &vector(a)): _vector-info {
  let from-ptr = Magic.cast(&vector(a), pointer, xs) in
  let word-size = Word.size in
  let to-ptr = shift(from-ptr, word-size) in
  let type-ptr = shift(from-ptr, mul-int(word-size, 2)) in
  let base-content-ptr = shift(from-ptr, mul-int(word-size, 3)) in
  let from = Mem.load-int(from-ptr) in
  let content-ptr = shift(base-content-ptr, mul-int(word-size, from)) in
  _Vector-Info of {word-size, from-ptr, to-ptr, type-ptr, content-ptr}
}

resource _vector-internal {
  function (ptr: &vector(int)) {
    let _Vector-Info of {from-ptr, to-ptr, type-ptr, content-ptr} = _get-vector-info(ptr) in
    let from: int = Mem.load-int(from-ptr) in
    let to: int = Mem.load-int(to-ptr) in
    let size = sub-int(to, from) in
    let elem-type = Magic.cast(int, type, Mem.load-int(type-ptr)) in
    _discard-vector-content(content-ptr, elem-type, 0, size);
    free(from-ptr)
  },
  function (ptr: &vector(int)) {
    let _Vector-Info of {word-size, from-ptr, to-ptr, type-ptr, content-ptr} = _get-vector-info(ptr) in
    let from: int = Mem.load-int(from-ptr) in
    let to: int = Mem.load-int(to-ptr) in
    let size = sub-int(to, from) in
    let elem-type: type = Magic.cast(int, type, Mem.load-int(type-ptr)) in
    let target-ptr = malloc(C-Size(mul-int(word-size, add-int(size, 3)))) in
    Mem.store-int(0, target-ptr);
    Mem.store-int(size, shift(target-ptr, word-size));
    Mem.store-int(Magic.cast(type, int, elem-type), shift(target-ptr, mul-int(word-size, 2)));
    _copy-vector-content(content-ptr, shift(target-ptr, mul-int(word-size, 3)), elem-type, 0, size);
    Magic.cast(pointer, &vector(int), target-ptr)
  },
}

inline create<a>(len: int, !gen: (int) -> a): vector(a) {
  let word-size = Word.size in
  let ptr0 = malloc(C-Size(mul-int(word-size, add-int(3, len)))) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(len, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  let store-values =
    define self(index: int): unit {
      if ge-int(index, len) {
        Unit
      } else {
        let v = !gen(index) in
        Mem.store-int(Magic.cast(a, int, v), shift(ptr3, mul-int(index, word-size)));
        self(add-int(index, 1))
      }
    }
  in
  let _ = store-values(0) in
  magic cast(pointer, vector(a), ptr0)
}

inline create-E<e, a>(len: int, !gen: (int) -> either(e, a)): either(e, vector(a)) {
  let word-size = Word.size in
  let ptr0 = malloc(C-Size(mul-int(word-size, add-int(3, len)))) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(len, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  let store-values =
    define self(index: int): either(pair(e, int), unit) {
      if ge-int(index, len) {
        Right(Unit)
      } else {
        match !gen(index) {
        | Left(e) =>
          Left(Pair(e, index))
        | Right(v) =>
          Mem.store-int(Magic.cast(a, int, v), shift(ptr3, mul-int(index, word-size)));
          self(add-int(index, 1))
        }
      }
    }
  in
  match store-values(0) {
  | Left(Pair(e, index)) =>
    _discard-vector-content(ptr3, a, 0, index);
    free(ptr0);
    Left(e)
  | Right(_) =>
    Right(magic cast(pointer, vector(a), ptr0))
  }
}

define create-empty<a>(): vector(a) {
  let word-size = Word.size in
  let ptr0 = malloc(C-Size(mul-int(word-size, 3))) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(0, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  magic cast(pointer, vector(a), ptr0)
}

inline _access<a>(xs: &vector(a), i: int): &a {
  let _Vector-Info of {content-ptr, word-size} = _get-vector-info(xs) in
  let elem-address = shift(content-ptr, mul-int(word-size, i)) in
  Magic.cast(int, &a, Mem.load-int(elem-address))
}

define length<a>(xs: &vector(a)): int {
  let _Vector-Info of {from-ptr, to-ptr} = _get-vector-info(xs) in
  let from = Mem.load-int(from-ptr) in
  let to = Mem.load-int(to-ptr) in
  sub-int(to, from)
}

inline access<a>(xs: &vector(a), i: int): ?&a {
  if and(le-int(0, i), lt-int(i, length(xs))) {
    Right(_access(xs, i))
  } else {
    none
  }
}

inline for-each<a, b>(xs: vector(a), !f: (a, int) -> b): vector(b) {
  let word-size = Word.size in
  let ptr0 = Magic.cast(vector(a), pointer, xs) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  let from = Mem.load-int(ptr0) in
  let to = Mem.load-int(ptr1) in
  Mem.store-int(Magic.cast(type, int, b), ptr2);
  let store-values =
    define self(index: int): unit {
      if ge-int(index, to) {
        Unit
      } else {
        let value-ptr = shift(ptr3, mul-int(index, word-size)) in
        let old-value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        let new-value-ptr = Magic.cast(b, int, !f(old-value, index)) in
        Mem.store-int(new-value-ptr, value-ptr);
        self(add-int(index, 1))
      }
    }
  in
  store-values(from);
  Magic.cast(pointer, vector(b), ptr0)
}

inline for-each-N<a, b>(xs: &vector(a), f: (&a, int) -> b): vector(b) {
  let len = length(xs) in
  create(len, function (i) {
    f(_access(xs, i), i)
  })
}

inline for-each-E<e, a, b>(xs: vector(a), !f: (a, int) -> either(e, b)): either(e, vector(b)) {
  let word-size = Word.size in
  let ptr0 = Magic.cast(vector(a), pointer, xs) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  let from = Mem.load-int(ptr0) in
  let to = Mem.load-int(ptr1) in
  Mem.store-int(Magic.cast(type, int, b), ptr2);
  let store-values =
    define self(index: int): either(pair(e, int), unit) {
      if ge-int(index, to) {
        Right(Unit)
      } else {
        let value-ptr = shift(ptr3, mul-int(index, word-size)) in
        let old-value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        match !f(old-value, index) {
        | Left(e) =>
          Left(Pair(e, index))
        | Right(v) =>
          let new-value-ptr = Magic.cast(b, int, v) in
          Mem.store-int(new-value-ptr, value-ptr);
          self(add-int(index, 1))
        }
      }
    }
  in
  match store-values(from) {
  | Left(Pair(error, index)) =>
    _discard-vector-content(ptr3, a, 0, index);
    free(ptr0);
    Left(error)
  | Right(_) =>
    Right(Magic.cast(pointer, vector(b), ptr0))
  }
}

inline for-each-EN<e, a, b>(xs: &vector(a), f: (&a, int) -> either(e, b)): either(e, vector(b)) {
  let len = length(xs) in
  create-E(len, function (i) {
    f(_access(xs, i), i)
  })
}

inline for<a>(xs: vector(a), !f: (a, int) -> unit): unit {
  let word-size = Word.size in
  let ptr0 = Magic.cast(vector(a), pointer, xs) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  let from = Mem.load-int(ptr0) in
  let to = Mem.load-int(ptr1) in
  let loop =
    define self(index: int): unit {
      if ge-int(index, to) {
        Unit
      } else {
        let value-ptr = shift(ptr3, mul-int(index, word-size)) in
        let old-value = Mem.load-int(value-ptr) in
        !f(Magic.cast(int, a, old-value), index);
        self(add-int(index, 1))
      }
    }
  in
  loop(from);
  free(ptr0)
}

inline for-N<a>(xs: &vector(a), f: (&a, int) -> unit): unit {
  let len = length(xs) in
  loop(len, function (i) {
    f(_access(xs, i), i)
  })
}

define for-each-vertical<a, b>(xs: vector(a), col-size: int, !f: (a, int) -> b): vector(b) {
  assert "core.vector.for-each-vertical: col-size > 0" {
    gt-int(col-size, 0)
  };
  let word-size = core.word.size in
  let ptr0 = core.magic.cast(vector(a), pointer, xs) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  let from = core.memory.load-int(ptr0) in
  let to = core.memory.load-int(ptr1) in
  core.memory.store-int(core.magic.cast(type, int, b), ptr2);
  let vec-size = sub-int(to, from) in
  let store-values =
    define self(index: int): unit {
      if ge-int(index, to) {
        Unit
      } else {
        let value-ptr = shift(ptr3, mul-int(index, word-size)) in
        let old-value = core.magic.cast(int, a, core.memory.load-int(value-ptr)) in
        let new-value-ptr = core.magic.cast(b, int, !f(old-value, index)) in
        core.memory.store-int(new-value-ptr, value-ptr);
        let next-index-cand = add-int(index, col-size) in
        if lt-int(next-index-cand, vec-size) {
          self(next-index-cand)
        } else {
          let current-column = rem-int(index, col-size) in
          let next-column = add-int(current-column, 1) in
          if ge-int(next-column, col-size) {
            Unit
          } else {
            self(next-column)
          }
        }
      }
    }
  in
  store-values(from);
  core.magic.cast(pointer, vector(b), ptr0)
}

inline fold-left-N<elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  !consumer: (result-type, &elem-type, int) -> result-type,
): result-type {
  let sz = length(xs) in
  let helper =
    define loop(cursor: int, acc, xs) {
      if eq-int(cursor, sz) {
        acc
      } else {
        let y = _access(xs, cursor) in
        loop(add-int(cursor, 1), !consumer(acc, y, cursor), xs)
      }
    }
  in
  helper(0, acc, xs)
}

inline fold-left-reverse-N<elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  !consumer: (result-type, &elem-type, int) -> result-type,
): result-type {
  let sz = core.vector.length(xs) in
  let helper =
    define loop(cursor: int, acc: result-type, xs: &vector(elem-type)): result-type {
      if lt-int(cursor, 0) {
        acc
      } else {
        let y = core.vector._access(xs, cursor) in
        loop(sub-int(cursor, 1), !consumer(acc, y, cursor), xs)
      }
    }
  in
  helper(sub-int(sz, 1), acc, xs)
}

inline zip-with-N<a, b, c>(xs: &vector(a), ys: &vector(b), f: (&a, &b, int) -> c): vector(c) {
  let len1 = length(xs) in
  let len2 = length(ys) in
  let min-func = minimum(as-ord-N) in
  let len-or-none = min-func([len1, len2]) in
  let len = from-right(len-or-none, 0) in
  create(len, function (i) {
    let val1 = _access(xs, i) in
    let val2 = _access(ys, i) in
    f(val1, val2, i)
  })
}

define from-list<a>(base-list: list(a)): vector(a) {
  let word-size = Word.size in
  let n on base-list = this.list.length(base-list) in
  let ptr0 = malloc(C-Size(mul-int(word-size, add-int(3, n)))) in
  let ptr1 = shift(ptr0, word-size) in
  let ptr2 = shift(ptr0, mul-int(word-size, 2)) in
  let ptr3 = shift(ptr0, mul-int(word-size, 3)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(n, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  let store-values =
    define self(values: list(a), index: int): unit {
      match values {
      | Nil =>
        Unit
      | Cons(v, rest) =>
        Mem.store-int(Magic.cast(a, int, v), shift(ptr3, mul-int(index, word-size)));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(base-list, 0) in
  magic cast(pointer, _, ptr0)
}

define to-list<a>(xs: vector(a)): list(a) {
  let len on xs = length(xs) in
  let word-size = Word.size in
  let vecinfo on xs = _get-vector-info(xs) in
  let _Vector-Info of {content-ptr} = vecinfo in
  let ptr0 = Magic.cast(vector(a), pointer, xs) in
  let loop =
    define self(index: int): list(a) {
      if ge-int(index, len) {
        Nil
      } else {
        let value-ptr = shift(content-ptr, mul-int(index, word-size)) in
        let value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        Cons(value, self(add-int(index, 1)))
      }
    }
  in
  let result = loop(0) in
  free(ptr0);
  result
}

define exchange<a>(xs: vector(a), index: int, value: a): either(vector(a), pair(a, vector(a))) {
  let len on xs = core.vector.length(xs) in
  if and(le-int(0, index), lt-int(index, len)) {
    let ptr0 = core.magic.cast(vector(a), pointer, xs) in
    let ptr3 = shift(ptr0, mul-int(core.word.size, 3)) in
    let value-ptr = shift(ptr3, mul-int(index, core.word.size)) in
    let old-value = core.magic.cast(int, a, core.memory.load-int(value-ptr)) in
    let new-value-ptr = core.magic.cast(a, int, value) in
    core.memory.store-int(new-value-ptr, value-ptr);
    let new-vector = core.magic.cast(pointer, vector(a), ptr0) in
    Right(Pair(old-value, new-vector))
  } else {
    Left(xs)
  }
}

define _swap<a>(xs: vector(a), i: int, j: int): vector(a) {
  let p on xs =
    let _Vector-Info of {content-ptr} = _get-vector-info(xs) in
    content-ptr
  in
  let u = Word.size in
  let value-i = Mem.load-int(shift(p, mul-int(i, u))) in
  let value-j = Mem.load-int(shift(p, mul-int(j, u))) in
  Mem.store-int(value-j, shift(p, mul-int(i, u)));
  Mem.store-int(value-i, shift(p, mul-int(j, u)));
  xs
}

define swap<a>(xs: vector(a), i: int, j: int): vector(a) {
  let len on xs = length(xs) in
  let b1 = and(le-int(0, i), lt-int(i, len)) in
  let b2 = and(le-int(0, j), lt-int(j, len)) in
  if and(b1, b2) {
    _swap(xs, i, j)
  } else {
    xs
  }
}

inline _unsafe-extract<a, b>(x: either(a, b)): b {
  match x {
  | Left(_) =>
    panic("fail: _unsafe-extract\n")
  | Right(v) =>
    v
  }
}

define reverse<a>(xs: vector(a)): vector(a) {
  let len on xs = core.vector.length(xs) in
  let f =
    define self(xs: vector(a), left: int, right: int): vector(a) {
      if ge-int(left, right) {
        xs
      } else {
        let xs = swap(xs, left, right) in
        self(xs, add-int(left, 1), sub-int(right, 1))
      }
    }
  in
  f(xs, 0, sub-int(len, 1))
}

define take<a>(xs: vector(a), offset: int): vector(a) {
  let offset = max-int(0, offset) in
  let _ on xs =
    let len = core.vector.length(xs) in
    let rem-size = sub-int(len, offset) in
    loop(rem-size, function (i) {
      let v = core.vector._access(xs, add-int(i, offset)) in
      let _ = core.magic.cast(&a, a, v) in
      Unit
    });
    let ptr = core.magic.cast(&vector(a), pointer, xs) in
    let from = core.memory.load-int(ptr) in
    let to-ptr = shift(ptr, core.word.size) in
    let to = core.memory.load-int(to-ptr) in
    core.memory.store-int(min-int(to, add-int(from, offset)), to-ptr)
  in
  xs
}

define drop<a>(xs: vector(a), offset: int): vector(a) {
  let offset = max-int(0, offset) in
  let _ on xs =
    loop(offset, function (i) {
      let v = core.vector._access(xs, i) in
      let _ = core.magic.cast(&a, a, v) in
      Unit
    });
    let ptr = core.magic.cast(&vector(a), pointer, xs) in
    let from = core.memory.load-int(ptr) in
    let to-ptr = shift(ptr, core.word.size) in
    let to = core.memory.load-int(to-ptr) in
    core.memory.store-int(min-int(to, add-int(from, offset)), ptr)
  in
  xs
}

define slice<a>(xs: vector(a), from: int, to: int): vector(a) {
  let base = sub-int(from, 1) in
  let ys = drop(xs, base) in
  take(ys, sub-int(to, base))
}

define take-end<a>(xs: vector(a), n: int): vector(a) {
  let len on xs = core.vector.length(xs) in
  drop(xs, sub-int(len, n))
}

define drop-end<a>(xs: vector(a), n: int): vector(a) {
  let len on xs = core.vector.length(xs) in
  take(xs, sub-int(len, n))
}

define find<a>(xs: &vector(a), !pred: (&a) -> bool): ?int {
  let len = length(xs) in
  let f =
    define self(index: int): ?int {
      if ge-int(index, len) {
        none
      } else {
        let value = _access(xs, index) in
        if !pred(value) {
          Right(index)
        } else {
          self(add-int(index, 1))
        }
      }
    }
  in
  f(0)
}

define find-end<a>(xs: &vector(a), !pred: (&a) -> bool): ?int {
  let len = length(xs) in
  let f =
    define self(index: int): ?int {
      if lt-int(index, 0) {
        none
      } else {
        let value = _access(xs, index) in
        if !pred(value) {
          Right(index)
        } else {
          self(sub-int(index, 1))
        }
      }
    }
  in
  f(sub-int(len, 1))
}

define take-while<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find(xs, compose(not, !pred)) in
  match pivot-index {
  | Left(_) =>
    xs
  | Right(falsified-index) =>
    take(xs, falsified-index)
  }
}

define drop-while<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find(xs, compose(not, !pred)) in
  match pivot-index {
  | Left(_) =>
    create-empty()
  | Right(falsified-index) =>
    drop(xs, falsified-index)
  }
}

define take-while-end<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find-end(xs, compose(not, !pred)) in
  match pivot-index {
  | Left(_) =>
    xs
  | Right(falsified-index) =>
    drop(xs, add-int(falsified-index, 1))
  }
}

define drop-while-end<a>(xs: vector(a), !pred: (&a) -> bool): vector(a) {
  let pivot-index on xs = find-end(xs, compose(not, !pred)) in
  match pivot-index {
  | Left(_) =>
    create-empty()
  | Right(falsified-index) =>
    take(xs, add-int(falsified-index, 1))
  }
}
