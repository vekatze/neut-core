import {
  this.bool,
  this.box,
  this.c-int {eq-c-int},
  this.c-size {C-Size, add-c-size, c-size, mul-c-size},
  this.external {free, malloc, thread-create, thread-exit, thread-join},
  this.foreign {THREAD_SIZE},
  this.magic {cast},
  this.memory {load-int, load-int8, load-pointer, store-int, store-int8},
  this.pointer {shift},
  this.reify {Opaque, type-tag-to-int},
  this.unit {Unit, unit},
  this.word,
}

inline _embody(a: type, x: &a): a {
  *x
}

inline _thread-size(): c-size {
  let u = this.word.word-size;
  add-c-size(mul-c-size(u, C-Size(3)), C-Size(1))
}

nominal {
  _await-and-write-result(addr: pointer): unit,
  thread(_: type): type,
  attach(a: type, e: thread(a)): a,
}

resource _thread-inner {
  function (addr: pointer) {
    let u = this.word.size;
    let elem-type = cast(int, type, load-int(shift(addr, u)));
    let pr: thread(elem-type) = cast(pointer, thread(elem-type), addr);
    let _: elem-type = this.thread.attach(elem-type, pr);
    Unit
  },
  function (addr: pointer) {
    let u = this.word.size;
    let u2 = mul-int(u, 2);
    let u3 = mul-int(u, 3);
    _await-and-write-result(addr);
    let thread-id = load-int(addr);
    let elem-type = cast(int, type, load-int(shift(addr, u)));
    let elem-value: &elem-type = cast(int, &elem-type, load-int(shift(addr, u2)));
    let new-addr = malloc(_thread-size());
    store-int(thread-id, new-addr);
    store-int(cast(type, int, elem-type), shift(new-addr, u));
    let cloned-value: elem-type = _embody(elem-type, elem-value);
    store-int(cast(elem-type, int, cloned-value), shift(new-addr, u2));
    store-int8(1, shift(new-addr, u3));
    new-addr
  },
  type-tag-to-int(Opaque),
}

// `thread` must be defined by `define` (and not by `data`) so that
// `thread(a)` is consider to be possibly noetic
define thread(_: type): type {
  _thread-inner
}

define attach(a: type, e: thread(a)): a {
  let addr = cast(thread(a), pointer, e);
  _await-and-write-result(addr);
  let u = this.word.size;
  let value-ptr = shift(addr, mul-int(u, 2));
  let value = load-int(value-ptr);
  free(addr);
  cast(int, a, value)
}

define _await-and-write-result(addr: pointer): unit {
  let u = this.word.size;
  let u2 = mul-int(u, 2);
  let u3 = mul-int(u, 3);
  let finished-flag-ptr = shift(addr, u3);
  let finished-flag = load-int8(finished-flag-ptr);
  if eq-int8(finished-flag, 0) {
    let thread-id = load-pointer(addr);
    let value-ptr = shift(addr, u2);
    thread-join(thread-id, value-ptr);
    store-int8(1, finished-flag-ptr)
  } else {
    Unit
  }
}

// (thread-id, result-type, result-value, finished-flag): thread(result-type)
define detach(a: type, f: () -> a): thread(a) {
  let thread-func =
    function () {
      thread-exit(cast(a, pointer, f()))
    };
  let u = this.word.size;
  let u2 = mul-int(u, 2);
  let u3 = mul-int(u, 3);
  let closure = cast(() -> unit, pointer, thread-func);
  let closure-env = load-pointer(shift(closure, u));
  let closure-label = load-pointer(shift(closure, u2));
  free(closure);
  let thread-id-pointer = malloc(THREAD_SIZE);
  let thread-create =
    define naive-loop(): unit {
      let result = thread-create(thread-id-pointer, closure-label, closure-env);
      if eq-c-int(result, 0) {
        Unit
      } else {
        naive-loop()
      }
    };
  let _ = thread-create();
  let thread-id = load-int(thread-id-pointer);
  free(thread-id-pointer);
  let ptr = malloc(_thread-size());
  store-int(thread-id, ptr);
  store-int(cast(type, int, a), shift(ptr, u));
  store-int(0, shift(ptr, u2));
  store-int8(0, shift(ptr, u3));
  cast(pointer, thread(a), ptr)
}
