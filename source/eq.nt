import {
  O {EQ},
  Ord {ord},
  this.bool {False, True, bool},
  this.ord {Ord},
}

data eq(a) {
| Eq(
    equal: (a, a) -> bool,
  )
}

inline from-ord<a>(o: ord(a)): eq(a) {
  Eq of {
    equal = {
      function (x, y) {
        let Ord of {compare} = o in
        match compare(x, y) {
        | EQ =>
          True
        | _ =>
          False
        }
      }
    },
  }
}

inline comap<a, b>(e: eq(b), !f: (a) -> b): eq(a) {
  Eq of {
    equal = {
      function (x, y) {
        let Eq of {equal} = e in
        equal(!f(x), !f(y))
      }
    },
  }
}
