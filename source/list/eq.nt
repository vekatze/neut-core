import {
  this.bool {False, True, bool},
  this.box,
  this.eq {Eq, eq},
  this.list {Cons, Nil, list},
}

inline as-eq<a>(f: eq(a)): eq(list(a)) {
  let Eq of {equal := !eq} = f;
  Eq of {
    equal := {
      define self(xs, ys) {
        case xs, ys {
        | Nil, Nil =>
          True
        | Nil, Cons(_, _) =>
          False
        | Cons(_, _), Nil =>
          False
        | Cons(x, xs), Cons(y, ys) =>
          if !eq(x, y) {
            self(xs, ys)
          } else {
            False
          }
        }
      }
    },
  }
}

define _nop-copy<a>(x: &&a): &a {
  *x
}

define member<a>(e: &eq(a), xs: &list(a), value: &a): bool {
  case xs {
  | Nil =>
    False
  | Cons(y, ys) =>
    tie Eq of {equal} = e;
    if equal(value, y) {
      True
    } else {
      member(e, ys, value)
    }
  }
}

define nub<a>(e: &eq(a), xs: list(a)): list(a) {
  let f =
    define nub(xs: list(a), acc: list(a)): list(a) {
      match xs {
      | Nil =>
        Nil
      | Cons(!y, ys) =>
        let already-found-p on acc, !y = member(e, acc, !y);
        if already-found-p {
          nub(ys, acc)
        } else {
          Cons(!y, nub(ys, Cons(!y, acc)))
        }
      }
    };
  f(xs, [])
}
