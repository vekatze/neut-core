import {
  this.c-int {c-int, from-c-int},
  this.c-size {C-Size, c-size},
  this.external,
  this.memory {store-int},
  this.pointer {null-pointer, shift},
  this.show {Show, show},
  this.text {_get-content-pointer, text},
  this.unit,
  this.word,
}

foreign {
  snprintf(pointer, c-size, pointer): c-int,
  sprintf(pointer, pointer): c-int,
}

define _show(c-fmt: &text, x: int): text {
  let fmt = _get-content-pointer(c-fmt);
  let size = from-c-int(magic external snprintf(null-pointer, C-Size(0), fmt)(x: int));
  let ptr = this.external.malloc(C-Size(add-int(size, add-int(1, mul-int(this.word.size, 2)))));
  store-int(0, ptr);
  // ignore the trailing null character
  store-int(size, shift(ptr, this.word.size));
  let buffer = shift(ptr, mul-int(this.word.size, 2));
  let _ = magic external sprintf(buffer, fmt)(x: int);
  magic cast(pointer, text, ptr)
}

inline as-show: show(int) {
  Show(function (x) {
    _show("%ld", x)
  })
}

define show-int(x: int): text {
  let Show of {show} = as-show;
  show(x)
}

define show-uint(x: int64): text {
  _show("%lu", x)
}
