import {
  this.bool {False, True, bool},
  this.unit {Unit, unit},
}

data either(a, b) {
| Left(a)
| Right(b)
}

define is-left<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    True
  | Right(_) =>
    False
  }
}

define is-right<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    False
  | Right(_) =>
    True
  }
}

define from-right<a, b>(lr: either(a, b), fallback: b): b {
  match lr {
  | Right(r) =>
    r
  | Left(_) =>
    fallback
  }
}

define from-left<a, b>(lr: either(a, b), fallback: a): a {
  match lr {
  | Right(_) =>
    fallback
  | Left(l) =>
    l
  }
}

inline map-right<a, b, c>(v: either(a, b), f: (b) -> c): either(a, c) {
  match v {
  | Left(l) =>
    Left(l)
  | Right(r) =>
    Right(f(r))
  }
}

inline map-left<a, b, c>(v: either(a, b), f: (a) -> c): either(c, b) {
  match v {
  | Left(l) =>
    Left(f(l))
  | Right(r) =>
    Right(r)
  }
}

define swap<a, b>(v: either(a, b)): either(b, a) {
  match v {
  | Left(l) =>
    Right(l)
  | Right(r) =>
    Left(r)
  }
}

inline none<a>: ?a {
  Left(Unit)
}

inline right-unit<a>: either(a, unit) {
  Right(Unit)
}

define to-option<a, b>(v: either(a, b)): ?b {
  match v {
  | Right(r) =>
    Right(r)
  | Left(_) =>
    none
  }
}
