import {
  this.bool,
  this.box,
  this.either {Right, none},
  this.list {Cons, Nil, append, list},
  this.ord {Ord, ord},
  this.ordering {EQ, GT, LT},
  this.pair {Pair, pair},
  this.text,
  this.trick {panic},
  this.unit,
}

// size balanced tree
data dictionary(k, v) {
| Tip
| Bin(
    size: int,
    key: k,
    value: v,
    left: dictionary(k, v),
    right: dictionary(k, v),
  )
}

inline size<k, v>(d: &dictionary(k, v)): int {
  case d {
  | Tip =>
    0
  | Bin of {size} =>
    *size
  }
}

inline empty<k, v>: dictionary(k, v) {
  Tip
}

inline singleton<k, v>(key: k, value: v): dictionary(k, v) {
  Bin of {size = 1, left = Tip, right = Tip, key, value}
}

inline _delta: int {
  3
}

inline _ratio: int {
  2
}

inline _balance-L<a, b>(k: a, x: b, l: dictionary(a, b), r: dictionary(a, b)): dictionary(a, b) {
  match r {
  | Tip =>
    match l {
    | Tip =>
      singleton(k, x)
    | Bin(ls, lk, lx, ll, lr) =>
      match ll, lr {
      | Tip, Tip =>
        Bin(2, k, x, Bin(ls, lk, lx, Tip, Tip), Tip)
      | Tip, Bin(_, lrk, lrx, _, _) =>
        Bin(3, lrk, lrx, Bin(1, lk, lx, Tip, Tip), Bin(1, k, x, Tip, Tip))
      | Bin(lls, llk, llx, lll, llr), Tip =>
        Bin(3, lk, lx, Bin(lls, llk, llx, lll, llr), Bin(1, k, x, Tip, Tip))
      | Bin(lls, llk, llx, lll, llr), Bin(lrs, lrk, lrx, lrl, lrr) =>
        if lt-int(lrs, mul-int(_ratio, lls)) {
          let ll = Bin(lls, llk, llx, lll, llr) in
          let lr = Bin(lrs, lrk, lrx, lrl, lrr) in
          Bin(add-int(1, ls), lk, lx, ll, Bin(add-int(1, lrs), k, x, lr, Tip))
        } else {
          let ll = Bin(lls, llk, llx, lll, llr) in
          let lrls on lrl = size(lrl) in
          let lrrs on lrr = size(lrr) in
          let ls' = add-int(1, add-int(lls, lrls)) in
          let rs' = add-int(1, lrrs) in
          Bin(add-int(1, ls), lrk, lrx, Bin(ls', lk, lx, ll, lrl), Bin(rs', k, x, lrr, Tip))
        }
      }
    }
  | Bin(rs, rk, rx, rl, rr) =>
    match l {
    | Tip =>
      let r = Bin(rs, rk, rx, rl, rr) in
      Bin(add-int(1, rs), k, x, Tip, r)
    | Bin(ls, lk, lx, ll, lr) =>
      if gt-int(ls, mul-int(_delta, rs)) {
        match ll, lr {
        | Bin(lls, llk, llx, lll, llr), Bin(lrs, lrk, lrx, lrl, lrr) =>
          let lrls on lrl = size(lrl) in
          let lrrs on lrr = size(lrr) in
          let ll = Bin(lls, llk, llx, lll, llr) in
          let r = Bin(rs, rk, rx, rl, rr) in
          if lt-int(lrs, mul-int(_ratio, lls)) {
            let s' = add-int(1, add-int(ls, rs)) in
            let rs' = add-int(1, add-int(rs, lrs)) in
            Bin(s', lk, lx, ll, Bin(rs', k, x, Bin(lrs, lrk, lrx, lrl, lrr), r))
          } else {
            let s' = add-int(1, add-int(ls, rs)) in
            let ls' = add-int(1, add-int(lls, lrls)) in
            let rs' = add-int(1, add-int(rs, lrrs)) in
            Bin(s', lrk, lrx, Bin(ls', lk, lx, ll, lrl), Bin(rs', k, x, lrr, r))
          }
        | _, _ =>
          // unreachable
          let !lk = lk in
          let !lx = lx in
          let !tip = panic("failure in (core).dictionary._balance-L") in
          Bin(ls, !lk, !lx, Bin(ls, !lk, !lx, !tip, !tip), Bin(ls, !lk, !lx, !tip, !tip))
        }
      } else {
        let s' = add-int(1, add-int(ls, rs)) in
        let l = Bin(ls, lk, lx, ll, lr) in
        let r = Bin(rs, rk, rx, rl, rr) in
        Bin(s', k, x, l, r)
      }
    }
  }
}

inline _balance-R<a, b>(k: a, x: b, l: dictionary(a, b), r: dictionary(a, b)): dictionary(a, b) {
  match l {
  | Tip =>
    match r {
    | Tip =>
      singleton(k, x)
    | Bin(rs, rk, rx, rl, rr) =>
      match rl, rr {
      | Tip, Tip =>
        Bin(2, k, x, Tip, Bin(rs, rk, rx, Tip, Tip))
      | Tip, Bin(rrs, rrk, rrx, rrl, rrr) =>
        Bin(3, rk, rx, Bin(1, k, x, Tip, Tip), Bin(rrs, rrk, rrx, rrl, rrr))
      | Bin(_, rlk, rlx, _, _), Tip =>
        Bin(3, rlk, rlx, Bin(1, k, x, Tip, Tip), Bin(1, rk, rx, Tip, Tip))
      | Bin(rls, rlk, rlx, rll, rlr), Bin(rrs, rrk, rrx, rrl, rrr) =>
        if lt-int(rls, mul-int(_ratio, rrs)) {
          let rl = Bin(rls, rlk, rlx, rll, rlr) in
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          Bin(add-int(1, rs), rk, rx, Bin(add-int(1, rls), k, x, Tip, rl), rr)
        } else {
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          let rlrs on rlr = size(rlr) in
          let rlls on rll = size(rll) in
          let rs' = add-int(1, rlls) in
          let ls' = add-int(1, add-int(rrs, rlrs)) in
          Bin(add-int(1, rs), rlk, rlx, Bin(rs', k, x, Tip, rll), Bin(ls', rk, rx, rlr, rr))
        }
      }
    }
  | Bin(ls, lk, lx, ll, lr) =>
    match r {
    | Tip =>
      let l = Bin(ls, lk, lx, ll, lr) in
      Bin(add-int(1, ls), k, x, l, Tip)
    | Bin(rs, rk, rx, rl, rr) =>
      if gt-int(rs, mul-int(_delta, ls)) {
        match rl, rr {
        | Bin(rls, rlk, rlx, rll, rlr), Bin(rrs, rrk, rrx, rrl, rrr) =>
          let rlls on rll = size(rll) in
          let rlrs on rlr = size(rlr) in
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          let l = Bin(ls, lk, lx, ll, lr) in
          if lt-int(rls, mul-int(_ratio, rrs)) {
            let s' = add-int(1, add-int(ls, rs)) in
            let rs' = add-int(1, add-int(rs, rls)) in
            Bin(s', rk, rx, Bin(rs', k, x, l, Bin(rls, rlk, rlx, rll, rlr)), rr)
          } else {
            let s' = add-int(1, add-int(ls, rs)) in
            let ls' = add-int(1, add-int(ls, rlls)) in
            let rs' = add-int(1, add-int(rrs, rlrs)) in
            Bin(s', rlk, rlx, Bin(ls', k, x, l, rll), Bin(rs', rk, rx, rlr, rr))
          }
        | _, _ =>
          // unreachable
          let !rk = rk in
          let !rx = rx in
          let !tip = panic("failure in (core).dictionary._balance-L") in
          Bin(rs, !rk, !rx, Bin(rs, !rk, !rx, !tip, !tip), Bin(rs, !rk, !rx, !tip, !tip))
        }
      } else {
        let s' = add-int(1, add-int(ls, rs)) in
        let l = Bin(ls, lk, lx, ll, lr) in
        let r = Bin(rs, rk, rx, rl, rr) in
        Bin(s', k, x, l, r)
      }
    }
  }
}

inline insert<k>(L: ord(&k)): <v>(dictionary(k, v), k, v) -> dictionary(k, v) {
  let Ord of {compare = !compare} = L in
  define self<v: type>(d: dictionary(k, v), key-X: k, val-X: v): dictionary(k, v) {
    match d {
    | Tip =>
      singleton(key-X, val-X)
    | Bin(size, key-Y, val-Y, left, right) =>
      let order on key-X, key-Y = !compare(key-X, key-Y) in
      match order {
      | LT =>
        _balance-L(key-Y, val-Y, self(left, key-X, val-X), right)
      | GT =>
        _balance-R(key-Y, val-Y, left, self(right, key-X, val-X))
      | EQ =>
        Bin(size, key-X, val-X, left, right)
      }
    }
  }
}

inline lookup<k>(L: ord(&k)): <v>(&dictionary(k, v), &k) -> ?&v {
  let Ord of {compare = !compare} = L in
  define self<v>(d: &dictionary(k, v), needle: &k): ?&v {
    case d {
    | Tip =>
      none
    | Bin(_, k, x, l, r) =>
      match !compare(needle, k) {
      | LT =>
        self(l, needle)
      | GT =>
        self(r, needle)
      | EQ =>
        Right(x)
      }
    }
  }
}

data _view(k, a) {
| _View(
    key: k,
    value: a,
    dictionary: dictionary(k, a),
  )
}

define _min-view-sure<a, b>(k: a, x: b, l: dictionary(a, b), r: dictionary(a, b)): _view(a, b) {
  match l {
  | Tip =>
    _View(k, x, r)
  | Bin(_, lk, lx, ll, lr) =>
    let _View of {key, value, dictionary = l'} = _min-view-sure(lk, lx, ll, lr) in
    _View(key, value, _balance-R(k, x, l', r))
  }
}

define _max-view-sure<a, b>(k: a, x: b, l: dictionary(a, b), r: dictionary(a, b)): _view(a, b) {
  match r {
  | Tip =>
    _View(k, x, l)
  | Bin(_, rk, rx, rl, rr) =>
    let _View of {key, value, dictionary = r'} = _max-view-sure(rk, rx, rl, rr) in
    _View(key, value, _balance-L(k, x, l, r'))
  }
}

inline _glue<k, v>(d1: dictionary(k, v), d2: dictionary(k, v)): dictionary(k, v) {
  match d1, d2 {
  | Tip, d2 =>
    d2
  | d1, Tip =>
    d1
  | Bin(ls, lk, lx, ll, lr), Bin(rs, rk, rx, rl, rr) =>
    if gt-int(ls, rs) {
      let _View of {key, value, dictionary = l'} = _max-view-sure(lk, lx, ll, lr) in
      _balance-R(key, value, l', Bin(rs, rk, rx, rl, rr))
    } else {
      let _View of {key, value, dictionary = r'} = _min-view-sure(rk, rx, rl, rr) in
      _balance-L(key, value, Bin(ls, lk, lx, ll, lr), r')
    }
  }
}

inline delete<k>(!L: ord(&k)): <v>(dictionary(k, v), k) -> dictionary(k, v) {
  define self<v>(d: dictionary(k, v), needle: k): dictionary(k, v) {
    let Ord of {compare} = !L in
    match d {
    | Tip =>
      Tip
    | Bin(_, kx, x, l, r) =>
      let order on needle, kx = compare(needle, kx) in
      match order {
      | LT =>
        _balance-R(kx, x, self(l, needle), r)
      | GT =>
        _balance-L(kx, x, l, self(r, needle))
      | EQ =>
        _glue(l, r)
      }
    }
  }
}

data trope(k) {
| Trope(
    insert: <v>(dictionary(k, v), k, v) -> dictionary(k, v),
    delete: <v>(dictionary(k, v), k) -> dictionary(k, v),
    lookup: <v>(&dictionary(k, v), &k) -> ?&v,
  )
}

inline from-ord<k>(!_ord: ord(&k)): trope(k) {
  Trope of {
    insert = insert(!_ord),
    delete = delete(!_ord),
    lookup = lookup(!_ord),
  }
}

inline from-list<k, v>(!_ord: ord(&k), kvs: list(pair(k, v))): dictionary(k, v) {
  let f =
    define self(kvs: list(pair(k, v)), acc: dictionary(k, v)): dictionary(k, v) {
      match kvs {
      | Nil =>
        acc
      | Cons(Pair(k, v), rest) =>
        self(rest, insert(!_ord)(acc, k, v))
      }
    }
  in
  f(kvs, Tip)
}

define to-list<k, v>(d: dictionary(k, v)): list(pair(k, v)) {
  match d {
  | Tip =>
    []
  | Bin(_, k, v, d1, d2) =>
    let xs = to-list(d1) in
    let ys = to-list(d2) in
    append(xs, Cons(Pair(k, v), ys))
  }
}
