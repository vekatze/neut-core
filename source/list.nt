import {
  this.bool {False, True, and, bool, or},
  this.box,
  this.either {Left, Right, either, none, rho},
  this.monoid {Monoid, monoid},
  this.ord {Ord, ord},
  this.ordering {GT, LT},
  this.pair {Pair, pair},
  this.unit {Unit, unit},
}

data list(a: type) {
| Nil
| Cons(a, list(a))
}

inline singleton<a>(x: a): list(a) {
  Cons(x, Nil)
}

// folds are optimized into loops
inline fold-left<elem-type, result-type>(
  acc: result-type,
  xs: list(elem-type),
  !consumer: (result-type, elem-type) -> result-type,
): result-type {
  let helper =
    define loop(acc, xs): result-type {
      match xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        loop(!consumer(acc, y), ys)
      }
    };
  helper(acc, xs)
}

inline fold-left-N<elem-type, result-type>(
  acc: result-type,
  xs: &list(elem-type),
  !consumer: (result-type, &elem-type) -> result-type,
): result-type {
  let helper =
    define loop(acc, xs): result-type {
      case xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        loop(!consumer(acc, y), ys)
      }
    };
  helper(acc, xs)
}

inline fold-left-with-index<elem-type, result-type>(
  acc: result-type,
  xs: list(elem-type),
  !consumer: (result-type, elem-type, int) -> result-type,
): result-type {
  let helper =
    define loop(acc, xs, i): result-type {
      match xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        loop(!consumer(acc, y, i), ys, add-int(i, 1))
      }
    };
  helper(acc, xs, 0)
}

inline fold-right<elem-type, result-type>(
  xs: list(elem-type),
  acc: result-type,
  !consumer: (elem-type, result-type) -> result-type,
): result-type {
  let helper =
    define loop(xs, acc): result-type {
      match xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        !consumer(y, loop(ys, acc))
      }
    };
  helper(xs, acc)
}

inline fold-right-N<elem-type, result-type>(
  xs: &list(elem-type),
  acc: result-type,
  !consumer: (&elem-type, result-type) -> result-type,
): result-type {
  let helper =
    define loop(xs, acc): result-type {
      case xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        !consumer(y, loop(ys, acc))
      }
    };
  helper(xs, acc)
}

define intercalate<a>(xs: list(a), !sep: a): list(a) {
  match xs {
  | Nil =>
    Nil
  | Cons(y, Nil) =>
    Cons(y, Nil)
  | Cons(y, Cons(z, ys)) =>
    Cons(y, Cons(!sep, intercalate(Cons(z, ys), !sep)))
  }
}

// [x1, x2, x3], [y1, y2, y3]
// => [x1, y1, x2, y2, x3, y3]
define alternate<a>(xs: list(a), ys: list(a)): list(a) {
  match xs, ys {
  | Nil, Nil =>
    Nil
  | xs, Nil =>
    xs
  | Nil, ys =>
    ys
  | Cons(x', xs'), Cons(y', ys') =>
    Cons(x', Cons(y', alternate(xs', ys')))
  }
}

inline for-each<a, b>(xs: list(a), !f: (a) -> b): list(b) {
  let helper =
    define loop(xs: list(a), acc: list(b)): list(b) {
      match xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        Cons(!f(y), loop(ys, acc))
      }
    };
  helper(xs, Nil)
}

inline for-each-N<a, b>(xs: &list(a), !f: (&a) -> b): list(b) {
  let helper =
    define loop(xs: &list(a), acc: list(b)): list(b) {
      case xs {
      | Nil =>
        acc
      | Cons(y, ys) =>
        Cons(!f(y), loop(ys, acc))
      }
    };
  helper(xs, Nil)
}

inline for-each-E<a, e, b>(xs: list(a), !f: (a) -> either(e, b)): either(e, list(b)) {
  let f =
    define self(xs: list(a)): either(e, list(b)) {
      match xs {
      | Nil =>
        Right(Nil)
      | Cons(y, ys) =>
        try z = !f(y);
        try zs = self(ys);
        Right(Cons(z, zs))
      }
    };
  f(xs)
}

inline for-each-EN<a, e, b>(xs: &list(a), !f: (&a) -> either(e, b)): either(e, list(b)) {
  let f =
    define self(xs: &list(a)): either(e, list(b)) {
      case xs {
      | Nil =>
        Right(Nil)
      | Cons(y, ys) =>
        try z = !f(y);
        try zs = self(ys);
        Right(Cons(z, zs))
      }
    };
  f(xs)
}

inline for<a>(xs: list(a), f: (a) -> unit): unit {
  let _ = for-each(xs, f);
  Unit
}

inline for-N<a>(xs: &list(a), f: (&a) -> unit): unit {
  let _ = for-each-N(xs, f);
  Unit
}

define append<a>(xs: list(a), ys: list(a)): list(a) {
  this.list.fold-right(xs, ys, Cons)
}

define concat<a>(xss: list(list(a))): list(a) {
  this.list.fold-left(Nil, xss, exact append)
}

define reverse<a>(xs: list(a)): list(a) {
  this.list.fold-left(Nil, xs, function (acc, x) {
    Cons(x, acc)
  })
}

inline iterate<a>(count: int, !f: (int) -> a): list(a) {
  let helper =
    define self(cursor): list(a) {
      if ge-int(cursor, count) {
        Nil
      } else {
        Cons(!f(cursor), self(add-int(cursor, 1)))
      }
    };
  helper(0)
}

inline iterate-E<e, a>(count: int, !f: (int) -> either(e, a)): either(e, list(a)) {
  let helper =
    define self(acc: list(a), cursor: int): either(e, list(a)) {
      match ge-int(cursor, count) {
      | True =>
        Right(reverse(acc))
      | False =>
        try v = !f(cursor);
        self(Cons(v, acc), add-int(cursor, 1))
      }
    };
  helper(Nil, 0)
}

define length<a>(xs: &list(a)): int {
  fold-left-N(0, xs, function (acc, _) {
    add-int(1, acc)
  })
}

inline zip-with<a, b, c>(xs: list(a), ys: list(b), !f: (a, b) -> c): list(c) {
  let k =
    define loop(xs: list(a), ys: list(b)): list(c) {
      match xs, ys {
      | Nil, _ =>
        Nil
      | _, Nil =>
        Nil
      | Cons(x, xs'), Cons(y, ys') =>
        Cons(!f(x, y), loop(xs', ys'))
      }
    };
  k(xs, ys)
}

inline zip-with-N<a, b, c>(xs: &list(a), ys: &list(b), !f: (&a, &b) -> c): list(c) {
  let k =
    define loop(xs: &list(a), ys: &list(b)): list(c) {
      case xs, ys {
      | Nil, _ =>
        Nil
      | _, Nil =>
        Nil
      | Cons(x, xs'), Cons(y, ys') =>
        Cons(!f(x, y), loop(xs', ys'))
      }
    };
  k(xs, ys)
}

define zip<a, b>(xs: list(a), ys: list(b)): list(pair(a, b)) {
  zip-with(xs, ys, Pair)
}

define zip-N<a, b>(xs: &list(a), ys: &list(b)): list(pair(&a, &b)) {
  zip-with-N(xs, ys, function (x, y) {
    Pair(x, y)
  })
}

define unzip<a, b>(xs: list(pair(a, b))): pair(list(a), list(b)) {
  this.list.fold-right(xs, Pair(Nil, Nil), function (x, acc) {
    let Pair(l, r) = x;
    let Pair(rest-l, rest-r) = acc;
    Pair(Cons(l, rest-l), Cons(r, rest-r))
  })
}

define partition<a, b>(xs: list(either(a, b))): pair(list(a), list(b)) {
  this.list.fold-right(xs, Pair(Nil, Nil), function (elem, acc) {
    let Pair(ls, rs) = acc;
    match elem {
    | Left(l) =>
      Pair(Cons(l, ls), rs)
    | Right(r) =>
      Pair(ls, Cons(r, rs))
    }
  })
}

define uncons<a, r := rho>(xs: list(a)): ?pair(a, list(a)) {
  match xs {
  | Nil =>
    try _ = r;
    none
  | Cons(y, ys) =>
    try _ = r;
    Right(Pair(y, ys))
  }
}

define unsnoc<a, r := rho>(xs: list(a)): ?pair(list(a), a) {
  let f =
    define _unsnoc(r: ?unit, xs: list(a), acc: list(a)): ?pair(list(a), a) {
      match xs {
      | Nil =>
        try _ = r;
        Left(Unit)
      | Cons(y, Nil) =>
        try _ = r;
        Right(Pair(reverse(acc), y))
      | Cons(y, ys) =>
        _unsnoc(r, ys, Cons(y, acc))
      }
    };
  f(r, xs, Nil)
}

define all(xs: list(bool)): bool {
  this.list.fold-left(True, xs, and)
}

define any(xs: list(bool)): bool {
  this.list.fold-left(False, xs, or)
}

// right-open interval
define range(from: int, to: int): list(int) {
  if eq-int(from, to) {
    Nil
  } else {
    Cons(from, range(add-int(from, 1), to))
  }
}

inline find<a, r := rho>(xs: &list(a), pred: &(&a) -> bool): ?&a {
  let f =
    define self(r: ?unit, ys: &list(a)): ?&a {
      case ys {
      | Nil =>
        try _ = r;
        none
      | Cons(z, zs) =>
        if pred(z) {
          try _ = r;
          Right(z)
        } else {
          self(r, zs)
        }
      }
    };
  f(r, xs)
}

inline filter<a>(xs: list(a), !pred: (&a) -> bool): list(a) {
  let f =
    define self(xs: list(a)): list(a) {
      match xs {
      | Nil =>
        Nil
      | Cons(y, ys) =>
        let b on y = !pred(y);
        if b {
          Cons(y, self(ys))
        } else {
          self(ys)
        }
      }
    };
  f(xs)
}

define filter-some<a>(xs: list(?a)): list(a) {
  this.list.fold-right(xs, Nil, function (x, acc) {
    match x {
    | Right(v) =>
      Cons(v, acc)
    | Left(_) =>
      acc
    }
  })
}

inline sum<a>(as-monoid: monoid(a), xs: list(a)): a {
  let Monoid of {e, op} = as-monoid;
  this.list.fold-left(e, xs, function (acc, x) {
    op(acc, x)
  })
}

inline minimum<a, r := rho>(as-ord: ord(a)): (list(a)) -> ?a {
  function (xs) {
    let Ord of {compare} = as-ord;
    match xs {
    | Nil =>
      try _ = r;
      none
    | Cons(y, ys) =>
      try _ = r;
      Right(this.list.fold-left(y, ys, function (acc, y) {
        let order on acc, y = compare(acc, y);
        match order {
        | LT =>
          acc
        | _ =>
          y
        }
      }))
    }
  }
}

inline maximum<a, r := rho>(as-ord: ord(a)): (list(a)) -> ?a {
  function (xs) {
    let Ord of {compare := !compare} = as-ord;
    let helper =
      define self(cand: a, ys: list(a)): a {
        match ys {
        | Nil =>
          cand
        | Cons(z, zs) =>
          let order on cand, z = !compare(cand, z);
          match order {
          | GT =>
            self(cand, zs)
          | _ =>
            self(z, zs)
          }
        }
      };
    match xs {
    | Nil =>
      try _ = r;
      none
    | Cons(y, ys) =>
      try _ = r;
      Right(helper(y, ys))
    }
  }
}

define take<a>(xs: list(a), n: int): list(a) {
  if le-int(n, 0) {
    Nil
  } else {
    match xs {
    | Nil =>
      Nil
    | Cons(y, ys) =>
      Cons(y, take(ys, sub-int(n, 1)))
    }
  }
}

define take-N<a>(xs: &list(a), n: int): list(a) {
  if le-int(n, 0) {
    Nil
  } else {
    case xs {
    | Nil =>
      Nil
    | Cons(y, ys) =>
      Cons(*y, take-N(ys, sub-int(n, 1)))
    }
  }
}

define drop<a>(xs: list(a), n: int): list(a) {
  if le-int(n, 0) {
    xs
  } else {
    match xs {
    | Nil =>
      Nil
    | Cons(_, ys) =>
      drop(ys, sub-int(n, 1))
    }
  }
}

define drop-N<a>(xs: &list(a), n: int): list(a) {
  if le-int(n, 0) {
    *xs
  } else {
    case xs {
    | Nil =>
      Nil
    | Cons(_, ys) =>
      drop-N(ys, sub-int(n, 1))
    }
  }
}

define _split<a>(xs: list(a), n: int, head-acc: list(a)): pair(list(a), list(a)) {
  if le-int(n, 0) {
    Pair(reverse(head-acc), xs)
  } else {
    match xs {
    | Nil =>
      Pair(head-acc, Nil)
    | Cons(y, ys) =>
      _split(ys, sub-int(n, 1), Cons(y, head-acc))
    }
  }
}

define _split-N<a>(xs: &list(a), n: int, head-acc: list(a)): pair(list(a), list(a)) {
  if le-int(n, 0) {
    Pair(reverse(head-acc), *xs)
  } else {
    case xs {
    | Nil =>
      Pair(head-acc, Nil)
    | Cons(y, ys) =>
      _split-N(ys, sub-int(n, 1), Cons(*y, head-acc))
    }
  }
}

define split<a>(xs: list(a), n: int): pair(list(a), list(a)) {
  _split(xs, n, Nil)
}

define split-N<a>(xs: &list(a), n: int): pair(list(a), list(a)) {
  _split-N(xs, n, Nil)
}

define product<a, b>(xs: list(a), ys: list(b)): list(pair(a, b)) {
  let xyss =
    for-each(xs, function (x) {
      for-each(ys, function (y) {
        Pair(x, y)
      })
    });
  concat(xyss)
}

define is-empty<a>(xs: &list(a)): bool {
  case xs {
  | Nil =>
    True
  | _ =>
    False
  }
}

define nth<a, r := rho>(xs: &list(a), n: int): ?a {
  case xs {
  | Nil =>
    try _ = r;
    none
  | Cons(y, ys) =>
    if le-int(n, 0) {
      try _ = r;
      Right(*y)
    } else {
      nth(ys, sub-int(n, 1))
    }
  }
}

inline span<a>(xs: list(a), !pred: (&a) -> bool): pair(list(a), list(a)) {
  let f =
    define self(xs: list(a)): pair(list(a), list(a)) {
      match xs {
      | Nil =>
        Pair(Nil, Nil)
      | Cons(y, ys) =>
        let cond on y = !pred(y);
        if cond {
          let Pair(former, latter) = self(ys);
          Pair(Cons(y, former), latter)
        } else {
          Pair(Nil, Cons(y, ys))
        }
      }
    };
  f(xs)
}

inline span-N<a>(xs: &list(a), !pred: (&a) -> bool): pair(list(a), list(a)) {
  let f =
    define self(xs: &list(a)): pair(list(a), list(a)) {
      case xs {
      | Nil =>
        Pair(Nil, Nil)
      | Cons(y, ys) =>
        if !pred(y) {
          let Pair(former, latter) = self(ys);
          Pair(Cons(*y, former), latter)
        } else {
          Pair(Nil, Cons(*y, *ys))
        }
      }
    };
  f(xs)
}

inline take-while<a>(xs: list(a), !pred: (&a) -> bool): list(a) {
  let f =
    define self(xs: list(a)): list(a) {
      match xs {
      | Nil =>
        Nil
      | Cons(y, ys) =>
        let cond on y = !pred(y);
        if cond {
          Cons(y, self(ys))
        } else {
          Nil
        }
      }
    };
  f(xs)
}

inline take-while-N<a>(xs: &list(a), !pred: (&a) -> bool): list(a) {
  let f =
    define self(xs: &list(a)): list(a) {
      case xs {
      | Nil =>
        Nil
      | Cons(y, ys) =>
        if !pred(y) {
          Cons(*y, self(ys))
        } else {
          Nil
        }
      }
    };
  f(xs)
}

inline drop-while<a>(xs: list(a), !pred: (&a) -> bool): list(a) {
  let f =
    define self(xs: list(a)): list(a) {
      match xs {
      | Nil =>
        Nil
      | Cons(y, ys) =>
        let cond on y = !pred(y);
        if cond {
          self(ys)
        } else {
          Cons(y, ys)
        }
      }
    };
  f(xs)
}

inline drop-while-N<a>(xs: &list(a), !pred: (&a) -> bool): list(a) {
  let f =
    define self(xs: &list(a)): list(a) {
      case xs {
      | Nil =>
        Nil
      | Cons(y, ys) =>
        if !pred(y) {
          self(ys)
        } else {
          Cons(*y, *ys)
        }
      }
    };
  f(xs)
}
