import {
  this.box,
  this.c-size {C-Size, from-c-size},
  this.either {Left, Right},
  this.external {
    free,
    malloc,
    thread-cond-destroy,
    thread-cond-init,
    thread-cond-signal,
    thread-cond-wait,
    thread-mutex-destroy,
    thread-mutex-init,
    thread-mutex-lock,
    thread-mutex-unlock,
  },
  this.foreign {THREAD_COND_SIZE, THREAD_MUTEX_SIZE},
  this.int {sum-int},
  this.list,
  this.magic {cast},
  this.memory {load-int, store-int},
  this.pair {Pair},
  this.pointer {shift},
  this.queue {dequeue, empty, enqueue, queue},
  this.unit {unit},
  this.word,
}

inline _get-clone(a: type, x: &a): a {
  *x
}

nominal {
  _channel: type,
}

data channel(_: type) {
| _Channel(_channel)
}

define _new(a: type, q: queue(a)): channel(a) {
  let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
  let cond-size = from-c-size(THREAD_COND_SIZE) in
  let u = this.word.size in
  let ptr = malloc(C-Size(sum-int([u, mutex-size, cond-size, u]))) in
  store-int(cast(queue(a), int, q), ptr);
  let _ = thread-mutex-init(shift(ptr, u)) in
  thread-cond-init(shift(ptr, add-int(u, mutex-size)));
  store-int(cast(type, int, a), shift(ptr, add-int(u, add-int(mutex-size, cond-size))));
  cast(pointer, channel(a), ptr)
}

// (queue, thread-mutex, thread-cond)
resource _channel {
  function (ch: pointer) {
    let u = this.word.size in
    let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
    let cond-size = from-c-size(THREAD_COND_SIZE) in
    let cond-offset = add-int(u, mutex-size) in
    let type-offset = add-int(u, add-int(mutex-size, cond-size)) in
    let a = cast(int, type, load-int(shift(ch, type-offset))) in
    thread-cond-destroy(shift(ch, cond-offset));
    thread-mutex-destroy(shift(ch, u));
    let _: queue(a) = magic cast(int, queue(a), load-int(ch)) in
    free(ch)
  },
  function (ch: pointer) {
    let u = this.word.size in
    let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
    let cond-size = from-c-size(THREAD_COND_SIZE) in
    let type-offset = add-int(u, add-int(mutex-size, cond-size)) in
    let a = cast(int, type, load-int(shift(ch, type-offset))) in
    let q: &queue(a) = cast(int, &queue(a), load-int(ch)) in
    let q-clone: queue(a) = _get-clone(queue(a), q) in
    cast(channel(a), pointer, _new(a, q-clone))
  },
}

inline _make-channel<a>(): channel(a) {
  _new(a, empty)
}

define send<a>(ch: &channel(a), x: a): unit {
  let ch = cast(&channel(a), pointer, ch) in
  let u = this.word.size in
  let mutex-ptr = shift(ch, u) in
  thread-mutex-lock(mutex-ptr);
  let q-base: int = load-int(ch) in
  let q: queue(a) = cast(int, queue(a), q-base) in
  let x = x in
  let q = enqueue(q, x) in
  store-int(cast(queue(a), int, q), ch);
  let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
  thread-cond-signal(shift(ch, add-int(u, mutex-size)));
  thread-mutex-unlock(mutex-ptr)
}

define _receive-from-channel(a: type, ch: pointer, mutex-ptr: pointer): a {
  let q: queue(a) = cast(int, queue(a), load-int(ch)) in
  match dequeue(q) {
  | Right(Pair(v, q)) =>
    store-int(cast(queue(a), int, q), ch);
    thread-mutex-unlock(mutex-ptr);
    v
  | Left(_) =>
    store-int(cast(queue(int), int, empty), ch);
    let u = this.word.size in
    let mutex-size = from-c-size(THREAD_MUTEX_SIZE) in
    let cond-ptr = shift(ch, add-int(u, mutex-size)) in
    thread-cond-wait(cond-ptr, mutex-ptr);
    _receive-from-channel(a, ch, mutex-ptr)
  }
}

define receive<a>(ch: &channel(a)): a {
  let ch = cast(&channel(a), pointer, ch) in
  let u = this.word.size in
  let mutex-ptr = shift(ch, u) in
  thread-mutex-lock(mutex-ptr);
  _receive-from-channel(a, ch, mutex-ptr)
}
