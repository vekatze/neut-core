import {
  this.bool {False, True},
  this.box,
  this.ord {Ord, ord},
  this.ordering {LT},
  this.vector {_swap, vector},
}

define _find-lower<a>(o: &ord(a), vs: &vector(a), from: int, to: int, pivot: &a): int {
  if ge-int(from, to) {
    -1
  } else {
    let v = this.vector._access(vs, from);
    tie Ord of {compare} = o;
    match compare(v, pivot) {
    | LT =>
      _find-lower(o, vs, add-int(from, 1), to, pivot)
    | _ =>
      from
    }
  }
}

define _find-higher<a>(o: &ord(a), vs: &vector(a), boundary: int, to: int, pivot: &a): int {
  if le-int(to, boundary) {
    -1
  } else {
    let v = this.vector._access(vs, to);
    tie Ord of {compare} = o;
    match compare(v, pivot) {
    | LT =>
      to
    | _ =>
      _find-higher(o, vs, boundary, sub-int(to, 1), pivot)
    }
  }
}

define vector-quicksort<a>(o: &ord(a), nes: &(a) -> meta a, xs: vector(a)): vector(a) {
  let f =
    define outer-loop(vs: vector(a), from: int, to: int): vector(a) {
      if ge-int(from, to) {
        vs
      } else {
        let pivot-index = div-int(add-int(from, to), 2);
        letbox-T pivot on vs = nes(*this.vector._access(vs, pivot-index));
        let pivot-swap-loop =
          define inner-loop(
            vs: vector(a),
            current-from: int,
            current-to: int,
            pivot: a,
            boundary: int,
          ): vector(a) {
            let lower on vs, pivot = _find-lower(o, vs, current-from, boundary, pivot);
            let higher on vs, pivot = _find-higher(o, vs, boundary, current-to, pivot);
            match lt-int(lower, 0), lt-int(higher, 0) {
            | True, True =>
              outer-loop(outer-loop(vs, from, boundary), add-int(boundary, 1), to)
            | True, False =>
              let hi = higher;
              let vs = _swap(vs, hi, boundary);
              inner-loop(vs, boundary, current-to, pivot, hi)
            | False, True =>
              let lo = lower;
              let vs = _swap(vs, lo, boundary);
              inner-loop(vs, current-from, boundary, pivot, lo)
            | False, False =>
              let lo = lower;
              let hi = higher;
              let vs = _swap(vs, lo, hi);
              inner-loop(vs, add-int(lo, 1), sub-int(hi, 1), pivot, boundary)
            }
          };
        pivot-swap-loop(vs, from, to, pivot, pivot-index)
      }
    };
  let len on xs = this.vector.length(xs);
  f(xs, 0, sub-int(len, 1))
}
