import {
  Dict {dictionary},
  TIO,
  this.box,
  this.control {grow},
  this.dictionary {Trope},
  this.either {Left, Right},
  this.int.ord {as-ord-N},
  this.random {random-int},
  this.unit {Unit, unit},
}

inline intdict: Dict.trope(int) {
  Dict.from-ord(as-ord-N)
}

define make-big-dictionary(): dictionary(int, int) {
  grow(Dict.empty, 700000, function (acc, _) {
    let key = random-int(1000000) in
    let val = random-int(1000000) in
    let Trope of {insert} = intdict in
    insert(acc, key, val)
  })
}

define random-lookup-sum(d: &dictionary(int, int)): unit {
  let Trope of {lookup} = intdict in
  let rsum =
    grow(0, 700000, function (acc, _) {
      let key = random-int(1000000) in
      let val on key =
        match lookup(d, key) {
        | Left(_) =>
          0
        | Right(v) =>
          *v
        }
      in
      let _ = key in
      add-int(acc, val)
    })
  in
  TIO.print-int(rsum)
}

define main(): unit {
  let big-dictionary = make-big-dictionary() in
  let _ on big-dictionary = random-lookup-sum(big-dictionary) in
  let _ = big-dictionary in
  Unit
}
