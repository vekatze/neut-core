import {
  this.c-int {c-int, from-c-int},
  this.c-offset {c-offset},
  this.c-size {c-size},
  this.c-ssize {c-ssize},
  this.file.descriptor {descriptor},
  this.pointer {null-pointer},
  this.unit {Unit, unit},
}

foreign {
  malloc(c-size): pointer,
  free(pointer): void,
  exit(c-int): void,
  realloc(pointer, c-size): pointer,
  open(pointer, c-int): c-int,
  close(c-int): c-int,
  write(c-int, pointer, c-size): c-ssize,
  read(c-int, pointer, c-size): c-ssize,
  lseek(c-int, c-offset, c-int): c-offset,
  pthread_create(pointer, pointer, pointer, pointer): c-int,
  pthread_exit(pointer): void,
  pthread_join(pointer, pointer): c-int,
  pthread_mutex_init(pointer, pointer): c-int,
  pthread_mutex_destroy(pointer): c-int,
  pthread_mutex_lock(pointer): c-int,
  pthread_mutex_unlock(pointer): c-int,
  pthread_cond_init(pointer, pointer): c-int,
  pthread_cond_destroy(pointer): c-int,
  pthread_cond_signal(pointer): c-int,
  pthread_cond_wait(pointer, pointer): c-int,
}

define exit<a>(status: c-int): a {
  introspect operating-system {
  | darwin =>
    let _ = magic external exit(status);
    // unreachable
    magic cast(type, a, type)
  | linux =>
    let _ = magic external exit(status);
    // unreachable
    magic cast(type, a, type)
  }
}

define malloc(size: c-size): pointer {
  introspect operating-system {
  | darwin =>
    magic external malloc(size)
  | linux =>
    magic external malloc(size)
  }
}

define free(ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external free(ptr);
    Unit
  | linux =>
    let _ = magic external free(ptr);
    Unit
  }
}

define realloc(ptr: pointer, size: c-size): pointer {
  introspect operating-system {
  | darwin =>
    magic external realloc(ptr, size)
  | linux =>
    magic external realloc(ptr, size)
  }
}

define open(path-address: pointer, oflag: c-int, mode: c-int): descriptor {
  introspect operating-system {
  | darwin =>
    let d = magic external open(path-address, oflag)(mode: c-int);
    magic cast(c-int, descriptor, d)
  | linux =>
    let d = magic external open(path-address, oflag)(mode: c-int);
    magic cast(c-int, descriptor, d)
  }
}

define close(f: descriptor): int {
  introspect operating-system {
  | darwin =>
    from-c-int(magic external close(magic cast(descriptor, c-int, f)))
  | linux =>
    from-c-int(magic external close(magic cast(descriptor, c-int, f)))
  }
}

define write(f: descriptor, content-pointer: pointer, len: c-size): c-ssize {
  let f = magic cast(descriptor, c-int, f);
  introspect operating-system {
  | darwin =>
    magic external write(f, content-pointer, len)
  | linux =>
    magic external write(f, content-pointer, len)
  }
}

define read(f: descriptor, content-pointer: pointer, max-read-size: c-size): c-ssize {
  let f = magic cast(descriptor, c-int, f);
  introspect operating-system {
  | darwin =>
    magic external read(f, content-pointer, max-read-size)
  | linux =>
    magic external read(f, content-pointer, max-read-size)
  }
}

define lseek(f: descriptor, offset: c-offset, seek-mode: c-int): c-offset {
  let f = magic cast(descriptor, c-int, f);
  introspect operating-system {
  | darwin =>
    magic external lseek(f, offset, seek-mode)
  | linux =>
    magic external lseek(f, offset, seek-mode)
  }
}

define thread-create(id-ptr: pointer, thread-func-addr: pointer, thread-env-addr: pointer): c-int {
  introspect operating-system {
  | darwin =>
    magic external pthread_create(id-ptr, null-pointer, thread-func-addr, thread-env-addr)
  | linux =>
    magic external pthread_create(id-ptr, null-pointer, thread-func-addr, thread-env-addr)
  }
}

define thread-exit(result-addr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_exit(result-addr);
    Unit
  | linux =>
    let _ = magic external pthread_exit(result-addr);
    Unit
  }
}

data ptherad-t {}

define thread-join(id: pointer, result-addr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_join(id, result-addr);
    Unit
  | linux =>
    let _ = magic external pthread_join(id, result-addr);
    Unit
  }
}

define thread-mutex-init(mutex-ptr: pointer): c-int {
  introspect operating-system {
  | darwin =>
    magic external pthread_mutex_init(mutex-ptr, null-pointer)
  | linux =>
    magic external pthread_mutex_init(mutex-ptr, null-pointer)
  }
}

define thread-mutex-destroy(mutex-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_mutex_destroy(mutex-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_mutex_destroy(mutex-ptr);
    Unit
  }
}

define thread-mutex-lock(mutex-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_mutex_lock(mutex-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_mutex_lock(mutex-ptr);
    Unit
  }
}

define thread-mutex-unlock(mutex-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_mutex_unlock(mutex-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_mutex_unlock(mutex-ptr);
    Unit
  }
}

define thread-cond-init(cond-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_cond_init(cond-ptr, null-pointer);
    Unit
  | linux =>
    let _ = magic external pthread_cond_init(cond-ptr, null-pointer);
    Unit
  }
}

define thread-cond-destroy(cond-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_cond_destroy(cond-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_cond_destroy(cond-ptr);
    Unit
  }
}

define thread-cond-signal(cond-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_cond_signal(cond-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_cond_signal(cond-ptr);
    Unit
  }
}

define thread-cond-wait(cond-ptr: pointer, mutex-ptr: pointer): unit {
  introspect operating-system {
  | darwin =>
    let _ = magic external pthread_cond_wait(cond-ptr, mutex-ptr);
    Unit
  | linux =>
    let _ = magic external pthread_cond_wait(cond-ptr, mutex-ptr);
    Unit
  }
}
