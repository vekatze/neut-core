import {
  this.bool {bool},
}

inline _c-ssize: type {
  introspect architecture {
  | amd64 =>
    int64
  | arm64 =>
    int64
  }
}

data c-ssize {
| C-SSize(_c-ssize)
}

inline from-c-ssize(x: c-ssize): int {
  let C-SSize(x) = x in
  introspect architecture {
  | amd64 =>
    x
  | arm64 =>
    x
  }
}

inline add-c-ssize(x: c-ssize, y: c-ssize): c-ssize {
  let C-SSize(x) = x in
  let C-SSize(y) = y in
  introspect architecture {
  | amd64 =>
    C-SSize(add-int(x, y))
  | arm64 =>
    C-SSize(add-int(x, y))
  }
}

inline mul-c-ssize(x: c-ssize, y: c-ssize): c-ssize {
  let C-SSize(x) = x in
  let C-SSize(y) = y in
  introspect architecture {
  | amd64 =>
    C-SSize(mul-int(x, y))
  | arm64 =>
    C-SSize(mul-int(x, y))
  }
}

inline lt-c-ssize(x: c-ssize, y: c-ssize): bool {
  let C-SSize(x) = x in
  let C-SSize(y) = y in
  introspect architecture {
  | amd64 =>
    lt-int(x, y)
  | arm64 =>
    lt-int(x, y)
  }
}

inline eq-c-ssize(x: c-ssize, y: c-ssize): bool {
  let C-SSize(x) = x in
  let C-SSize(y) = y in
  introspect architecture {
  | amd64 =>
    eq-int(x, y)
  | arm64 =>
    eq-int(x, y)
  }
}
