import {
  this.c-int {add-c-int, c-int, from-c-int},
  this.c-size {C-Size},
  this.external {malloc},
  this.int.io {print-int-line},
  this.memory {store-int},
  this.pointer {null-pointer, shift},
  this.show {Show, show},
  this.text {_get-content-pointer, text},
  this.unit,
  this.word,
}

foreign {
  snprintf(pointer, c-int, pointer): c-int,
  sprintf(pointer, pointer): c-int,
}

define _show(c-fmt: &text, x: float): text {
  let fmt = _get-content-pointer(c-fmt);
  let size = magic external snprintf(null-pointer, 0, fmt)(x: float);
  let ptr = this.external.malloc(C-Size(add-int(from-c-int(add-c-int(size, 1)), mul-int(this.word.size, 2))));
  store-int(0, ptr);
  store-int(from-c-int(size), shift(ptr, this.word.size));
  let buffer = shift(ptr, mul-int(this.word.size, 2));
  let _ = magic external snprintf(buffer, add-c-int(size, 1), fmt)(x: float);
  magic cast(pointer, text, ptr)
}

foreign {
  neut_core_v0_51_build_fixed_buf(pointer, int, float, int, int): int,
}

define show-float(x: float, decimals: int): text {
  let size = 80;
  let add-newline = 0;
  let text-ptr = malloc(C-Size(size));
  let word-size = this.word.size;
  let buffer-ptr = shift(text-ptr, mul-int(word-size, 2));
  let len = magic external neut_core_v0_51_build_fixed_buf(buffer-ptr, size, x, decimals, add-newline);
  store-int(0, text-ptr);
  store-int(len, shift(text-ptr, word-size));
  magic cast(pointer, text, text-ptr)
}

inline as-show: show(float) {
  Show(function (x) {
    show-float(x, 6)
  })
}
