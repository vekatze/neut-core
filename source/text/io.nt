import {
  FD,
  Magic,
  this.binary {binary},
  this.binary.io,
  this.control {loop},
  this.either {Right},
  this.file.descriptor {stdout},
  this.int.show {show-int},
  this.list {for, list},
  this.system {system},
  this.text {_format, text, to-binary},
  this.unit {Unit, unit},
}

define write(f: FD.descriptor, t: &text): system(unit) {
  this.binary.io.write(f, to-binary(t))
}

define writef(f: FD.descriptor, fmt: &text, args: list(text)): unit {
  for(_format(fmt, args), function (p) {
    pin p = p in
    let _ = write(f, p) in
    Unit
  })
}

define print(t: &text): unit {
  let _ = write(stdout, t) in
  Unit
}

define printf(fmt: &text, args: list(text)): unit {
  for(_format(fmt, args), function (p) {
    pin p = p in
    print(p)
  })
}

define print-int(x: int): unit {
  pin int-text = show-int(x) in
  print(int-text)
}

define read(from: FD.descriptor, initial-buffer-size: int): system(text) {
  try bin = this.binary.io.read(from, initial-buffer-size) in
  Right(Magic.cast(binary, text, bin))
}

define get-line(initial-buffer-size: int): system(text) {
  read(FD.stdin, initial-buffer-size)
}

define zen(): unit {
  print("hey\n");
  writef(stdout, "hello, {}!\n", [show-int(1234)]);
  loop(10000, function (_) {
    let _ = write(stdout, "hello.\n") in
    Unit
  });
  Unit
  // let _ = write(stdout, "hello.\n") in
  // let value = read(stdin, 10) in
  // match value {
  // | Right(_) =>
  //   print("success\n")
  // | Left(e) =>
  //   printf("{}\n", [get-error-message(e)])
  // }
}
