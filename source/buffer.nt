import {
  this.binary.io,
  this.bool,
  this.c-size {C-Size},
  this.either {Right, rho},
  this.external {free, malloc},
  this.file.descriptor {descriptor},
  this.memory {load-int, store-int},
  this.pointer {shift},
  this.system {system},
  this.unit {Unit, unit},
  this.word,
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

inline _memcpy(target-pointer: pointer, source-pointer: pointer, len: int): unit {
  let _ = magic external llvm.memcpy.p0.p0.i64(target-pointer, source-pointer, len, 0);
  Unit
}

inline _get-pointer-size-from-capacity(capacity: int) {
  let u = this.word.size;
  add-int(capacity, mul-int(u, 3))
}

// internal representation: (current-size, capacity, descriptor, byte-0, byte-1, ..., byte-n)
resource _buffer-internal {
  function (x: pointer) {
    free(x)
  },
  function (source-pointer: pointer) {
    let u = this.word.size;
    let capacity = load-int(shift(source-pointer, u));
    let pointer-size = _get-pointer-size-from-capacity(capacity);
    let new-pointer = malloc(C-Size(pointer-size));
    _memcpy(new-pointer, source-pointer, pointer-size);
    new-pointer
  },
}

data buffer {
| _Buffer(_buffer-internal)
}

define make-buffer(d: descriptor, capacity: int): buffer {
  let capacity =
    if gt-int(capacity, 0) {
      capacity
    } else {
      4096
    };
  let word-size = this.word.size;
  let pointer-size = _get-pointer-size-from-capacity(capacity);
  let buffer-ptr = malloc(C-Size(pointer-size));
  store-int(0, buffer-ptr);
  store-int(capacity, shift(buffer-ptr, word-size));
  store-int(magic cast(descriptor, int, d), shift(buffer-ptr, mul-int(word-size, 2)));
  magic cast(pointer, buffer, buffer-ptr)
}

inline _get-current-size(b: &buffer): int {
  load-int(magic cast(&buffer, pointer, b))
}

inline _set-current-size(b: &buffer, size: int): unit {
  store-int(size, magic cast(&buffer, pointer, b))
}

inline _get-capacity(b: &buffer): int {
  let u = this.word.size;
  load-int(shift(magic cast(&buffer, pointer, b), u))
}

inline _get-descriptor(b: &buffer): descriptor {
  let u2 = mul-int(this.word.size, 2);
  magic cast(int, descriptor, load-int(shift(magic cast(&buffer, pointer, b), u2)))
}

inline _get-content-pointer(b: &buffer): pointer {
  let u3 = mul-int(this.word.size, 3);
  shift(magic cast(&buffer, pointer, b), u3)
}

inline _get-next-content-pointer(b: &buffer): pointer {
  let current-size = _get-current-size(b);
  let content-pointer = _get-content-pointer(b);
  shift(content-pointer, current-size)
}

define flush<r := rho>(b: &buffer): system(unit) {
  let descriptor = _get-descriptor(b);
  let current-size = _get-current-size(b);
  let content-pointer = _get-content-pointer(b);
  try _ = this.binary.io._write-loop(descriptor, content-pointer, current-size, r);
  Right(_set-current-size(b, 0))
}

define _write(b: &buffer, content-pointer: pointer, content-length: int, r: system(unit)): system(unit) {
  let capacity = _get-capacity(b);
  let loop =
    define _buffer-write-loop(
      current-buffer-size: int,
      source-pointer: pointer,
      remaining: int,
      r: system(unit),
    ): system(unit) {
      let new-buffer-size = add-int(current-buffer-size, remaining);
      if le-int(new-buffer-size, capacity) {
        let next-content-pointer = _get-next-content-pointer(b);
        _memcpy(next-content-pointer, source-pointer, remaining);
        try _ = r;
        Right(_set-current-size(b, new-buffer-size))
      } else {
        let written-size = sub-int(capacity, current-buffer-size);
        let next-content-pointer = _get-next-content-pointer(b);
        _memcpy(next-content-pointer, source-pointer, written-size);
        _set-current-size(b, capacity);
        try _ = r;
        try _ = flush(b);
        _buffer-write-loop(
          0,
          shift(source-pointer, written-size),
          sub-int(remaining, written-size),
          Right(Unit),
        )
      }
    };
  loop(_get-current-size(b), content-pointer, content-length, r)
}
