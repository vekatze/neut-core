import {
  this.box,
  this.c-size {C-Size},
  this.external,
  this.magic {cast},
  this.memory {load-int, store-int},
  this.pair {Pair, pair},
  this.pointer {shift},
  this.type-tag {Opaque, type-tag-to-int},
  this.unit {Unit, unit},
  this.word,
}

inline _get-clone(a: type, x: &a): a {
  *x
}

nominal {
  _ref: type,
}

data ref(_: type) {
| _Ref(_ref)
}

define _make(a: type, val: a): ref(a) {
  let u = this.word.size;
  let ptr = this.external.malloc(C-Size(mul-int(this.word.size, 2)));
  store-int(cast(a, int, val), ptr);
  store-int(cast(type, int, a), shift(ptr, u));
  cast(pointer, ref(a), ptr)
}

// (content, type)
resource _ref {
  function (r: pointer) {
    let u = this.word.size;
    let a = cast(int, type, load-int(shift(r, u)));
    let _: a = magic cast(int, a, load-int(r));
    this.external.free(r)
  },
  function (r: pointer) {
    let u = this.word.size;
    let a = cast(int, type, load-int(shift(r, u)));
    let val: &a = cast(int, &a, load-int(r));
    let val-clone: a = _get-clone(a, val);
    cast(ref(a), pointer, _make(a, val-clone))
  },
  type-tag-to-int(Opaque),
}

inline _make-ref<a>(initial-value: a): ref(a) {
  _make(a, initial-value)
}

inline modify<a, b>(r: &ref(a), f: (a) -> pair(a, b)): b {
  let r = cast(&ref(a), pointer, r);
  let orig-val = cast(int, a, load-int(r));
  let Pair(new-val, result) = f(orig-val);
  store-int(cast(a, int, new-val), r);
  result
}

inline mutate<a>(r: &ref(a), f: (a) -> a): unit {
  modify(r, function (x) {
    Pair(f(x), Unit)
  })
}

inline borrow<a, b>(r: &ref(a), f: (&a) -> meta b): b {
  let r = cast(&ref(a), pointer, r);
  let orig-val = cast(int, &a, load-int(r));
  letbox-T result = f(orig-val);
  result
}

define clone<a>(r: &ref(a)): a {
  modify(r, function (!val: a) {
    Pair(!val, !val)
  })
}

define extract<a>(c: ref(a)): a {
  let r = cast(ref(a), pointer, c);
  let result = cast(int, a, load-int(r));
  this.external.free(r);
  result
}
