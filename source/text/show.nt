import {
  this.bool {and, bool, or},
  this.box,
  this.list {Cons, concat, list},
  this.rune {size-by-head-byte},
  this.show {Show, show},
  this.text {
    _drop-N,
    _get-byte,
    _slice-N,
    join,
    text,
    text-byte-length,
  },
}

// returns true iff `ch` is a C0 control character, a delete, a backslash, or a double quote
define _is-1-byte-escaped-character(ch: int8): bool {
  fold-left<or>[
    and(ule-int8(0, ch), ule-int8(ch, 0x1f)),
    eq-int8(ch, 0x22),
    eq-int8(ch, 0x5c),
    eq-int8(ch, 0x7f),
  ]
}

define _get-escaped-character-1(ch: int8): &text {
  match ch {
  | 0x00 =>
    "\\0"
  | 0x01 =>
    "\\u{1}"
  | 0x02 =>
    "\\u{2}"
  | 0x03 =>
    "\\u{3}"
  | 0x04 =>
    "\\u{4}"
  | 0x05 =>
    "\\u{5}"
  | 0x06 =>
    "\\u{6}"
  | 0x07 =>
    "\\u{7}"
  | 0x08 =>
    "\\u{8}"
  | 0x09 =>
    "\\t"
  | 0x0a =>
    "\\n"
  | 0x0b =>
    "\\u{b}"
  | 0x0c =>
    "\\u{c}"
  | 0x0d =>
    "\\r"
  | 0x0e =>
    "\\u{e}"
  | 0x0f =>
    "\\u{f}"
  | 0x10 =>
    "\\u{10}"
  | 0x11 =>
    "\\u{11}"
  | 0x12 =>
    "\\u{12}"
  | 0x13 =>
    "\\u{13}"
  | 0x14 =>
    "\\u{14}"
  | 0x15 =>
    "\\u{15}"
  | 0x16 =>
    "\\u{16}"
  | 0x17 =>
    "\\u{17}"
  | 0x18 =>
    "\\u{18}"
  | 0x19 =>
    "\\u{19}"
  | 0x1a =>
    "\\u{1a}"
  | 0x1b =>
    "\\u{1b}"
  | 0x1c =>
    "\\u{1c}"
  | 0x1d =>
    "\\u{1d}"
  | 0x1e =>
    "\\u{1e}"
  | 0x1f =>
    "\\u{1f}"
  | 0x22 =>
    "\\\""
  | 0x5c =>
    "\\\\"
  | 0x7f =>
    "\\u{7f}"
  | _ =>
    // unreachable
    ""
  }
}

// returns true iff `ch` is the lower 8 bits of a C1 control character
define _is-2-byte-escaped-character(ch: int8): bool {
  and(ule-int8(0x80, ch), ule-int8(ch, 0x9f))
}

define _get-escaped-character-2(ch: int8): &text {
  match ch {
  | 0x80 =>
    "\\u{80}"
  | 0x81 =>
    "\\u{81}"
  | 0x82 =>
    "\\u{82}"
  | 0x83 =>
    "\\u{83}"
  | 0x84 =>
    "\\u{84}"
  | 0x85 =>
    "\\u{85}"
  | 0x86 =>
    "\\u{86}"
  | 0x87 =>
    "\\u{87}"
  | 0x88 =>
    "\\u{88}"
  | 0x89 =>
    "\\u{89}"
  | 0x8a =>
    "\\u{8a}"
  | 0x8b =>
    "\\u{8b}"
  | 0x8c =>
    "\\u{8c}"
  | 0x8d =>
    "\\u{8d}"
  | 0x8e =>
    "\\u{8e}"
  | 0x8f =>
    "\\u{8f}"
  | 0x90 =>
    "\\u{90}"
  | 0x91 =>
    "\\u{91}"
  | 0x92 =>
    "\\u{92}"
  | 0x93 =>
    "\\u{93}"
  | 0x94 =>
    "\\u{94}"
  | 0x95 =>
    "\\u{95}"
  | 0x96 =>
    "\\u{96}"
  | 0x97 =>
    "\\u{97}"
  | 0x98 =>
    "\\u{98}"
  | 0x99 =>
    "\\u{99}"
  | 0x9a =>
    "\\u{9a}"
  | 0x9b =>
    "\\u{9b}"
  | 0x9c =>
    "\\u{9c}"
  | 0x9d =>
    "\\u{9d}"
  | 0x9e =>
    "\\u{9e}"
  | 0x9f =>
    "\\u{9f}"
  | _ =>
    // unreachable
    ""
  }
}

define _escape(t: &text, len: int, pivot: int, cursor: int): list(text) {
  let _next =
    function () {
      _escape(t, len, pivot, add-int(cursor, 1))
    };
  let index = add-int(pivot, cursor);
  if ge-int(index, len) {
    List[_drop-N(t, pivot)]
  } else {
    let head-char = _get-byte(t, index);
    let char-len = size-by-head-byte(head-char);
    if _is-1-byte-escaped-character(head-char) {
      let piece = _slice-N(t, pivot, cursor);
      let escaped-control-char = _get-escaped-character-1(head-char);
      let rest = _escape(t, len, add-int(add-int(pivot, cursor), char-len), 0);
      Cons(piece, Cons(*escaped-control-char, rest))
    } else {
      if eq-int(char-len, 2) {
        if eq-int8(head-char, 0xc2) {
          let head-char-2 = _get-byte(t, add-int(index, 1));
          if _is-2-byte-escaped-character(head-char-2) {
            let piece = _slice-N(t, pivot, cursor);
            let escaped-control-char = _get-escaped-character-2(head-char-2);
            let rest = _escape(t, len, add-int(add-int(pivot, cursor), char-len), 0);
            Cons(piece, Cons(*escaped-control-char, rest))
          } else {
            _next()
          }
        } else {
          _next()
        }
      } else {
        _next()
      }
    }
  }
}

define quote-text(t: text): text {
  pin t = t;
  let len = text-byte-length(t);
  join(concat(List[List[*"\""], _escape(t, len, 0, 0), List[*"\""]]))
}

define show-text(t: text): text {
  quote-text(t)
}

define show-text-N(t: &text): text {
  let len = text-byte-length(t);
  join(concat(List[List[*"\""], _escape(t, len, 0, 0), List[*"\""]]))
}

inline as-show: show(text) {
  Show(show-text)
}

inline as-show-N: show(&text) {
  Show(show-text-N)
}
