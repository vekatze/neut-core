import {
  this.binary {_get-content-pointer, binary, binary-length},
  this.bool,
  this.c-size {C-Size, c-size, from-c-size},
  this.c-ssize {eq-c-ssize, from-c-ssize, lt-c-ssize},
  this.either {Left, Right},
  this.external {free, malloc, read, realloc},
  this.file.descriptor {descriptor},
  this.int.show {show-int},
  this.list,
  this.magic,
  this.memory,
  this.pointer {extract, shift},
  this.system {Application-Error, report-system-error, system},
  this.text {format},
  this.unit {Unit, unit},
  this.word,
}

define _write-loop(d: descriptor, p: pointer, size: int): system(unit) {
  let loop =
    define write-loop(acc: int): system(unit) {
      let rest = sub-int(size, acc) in
      let head-ptr = shift(p, acc) in
      let bytes = core.external.write(d, head-ptr, C-Size(rest)) in
      if lt-c-ssize(bytes, 0) {
        report-system-error()
      } else {
        let acc = add-int(acc, from-c-ssize(bytes)) in
        if eq-int(acc, size) {
          Right(Unit)
        } else {
          write-loop(acc)
        }
      }
    }
  in
  loop(0)
}

define write(d: descriptor, b: &binary): system(unit) {
  let content-pointer = _get-content-pointer(b) in
  let len = binary-length(b) in
  _write-loop(d, content-pointer, len)
}

define _read-inner(
  from: descriptor,
  ptr: pointer,
  ptr-size: int,
  len-cand: int,
  buffer-size: c-size,
): system(binary) {
  let u = this.word.size in
  let content-size = sub-int(ptr-size, mul-int(u, 2)) in
  if lt-int(content-size, add-int(len-cand, from-c-size(buffer-size))) {
    let new-size = mul-int(ptr-size, 2) in
    let new-ptr = realloc(ptr, C-Size(new-size)) in
    if eq-int(extract(new-ptr), 0) {
      report-system-error()
    } else {
      _read-inner(from, new-ptr, new-size, len-cand, buffer-size)
    }
  } else {
    let content-ptr = shift(ptr, add-int(mul-int(u, 2), len-cand)) in
    let bytes = read(from, content-ptr, buffer-size) in
    let next-len-cand = add-int(len-cand, from-c-ssize(bytes)) in
    if lt-c-ssize(bytes, 0) {
      free(ptr);
      report-system-error()
    } else-if eq-c-ssize(bytes, 0) {
      this.memory.store-int(next-len-cand, shift(ptr, u));
      Right(this.magic.cast(pointer, binary, ptr))
    } else {
      _read-inner(from, ptr, ptr-size, next-len-cand, buffer-size)
    }
  }
}

define read(from: descriptor, initial-buffer-size: int): system(binary) {
  if le-int(initial-buffer-size, 0) {
    Left(Application-Error(format(
      "core.binary.io.read: initial-buffer-size must be positive, but got: {}",
      [show-int(initial-buffer-size)],
    )))
  } else {
    let u = this.word.size in
    let ptr-size = add-int(initial-buffer-size, mul-int(u, 2)) in
    let ptr = malloc(C-Size(ptr-size)) in
    this.memory.store-int(0, ptr);
    _read-inner(from, ptr, ptr-size, 0, C-Size(initial-buffer-size))
  }
}
