import {
  this.ansi {Blue, Yellow},
  this.bool,
  this.control {grow},
  this.doc {
    Chunk,
    Group,
    _nested-comma-seq,
    ansi-bold,
    ansi-fg,
    ansi-reset,
    atom-N,
    atom-float,
    atom-int,
    atom-rune,
    break,
    doc,
    empty,
    join,
    layout,
  },
  this.doc.chunk {Chunk-Choose, Chunk-Empty, Chunk-Text-N},
  this.magic,
  this.memory {load-int},
  this.pointer {shift},
  this.text {text},
  this.text.io {print},
  this.type-tag {
    Algebraic,
    Binary,
    Enum,
    Float16,
    Float32,
    Float64,
    Int1,
    Int16,
    Int2,
    Int32,
    Int4,
    Int64,
    Int8,
    Null,
    Pointer,
    Rune,
    Vector,
    get-cons-size,
    get-type-tag,
  },
  this.unit {unit},
  this.vector {vector},
  this.word,
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

nominal {
  vet-doc<a>(x: &a): doc,
}

inline optional-trailing-comma: doc {
  Chunk(Chunk-Choose(Chunk-Empty, Chunk-Text-N(",")))
}

define _vet-doc-vector(a: type, xs: &vector(a)): doc {
  let len = this.vector.length(xs);
  this.vector.fold-right-N(xs, empty, function (x: &a, acc: doc, i: int): doc {
    if eq-int(add-int(i, 1), len) {
      join[vet-doc(x), acc]
    } else {
      join[vet-doc(x), atom-N(","), break(" "), acc]
    }
  })
}

define _constructor-loop-doc(
  a: type,
  x: &a,
  cons-name-handler: (&text) -> doc,
  cons-args-handler: (i: int, size: int, t: type, x: &t) -> doc,
): doc {
  let ptr = this.magic.cast(&a, pointer, x);
  let discriminant = load-int(ptr);
  let size = get-cons-size(a, discriminant);
  let type-ptr = magic alloca(int64, add-int(size, 2)); // +2 is for data-arg-num and const-like
  let u = this.word.size;
  let _ = magic external llvm.memcpy.p0.p0.i64(type-ptr, ptr, mul-int(u, size), 0);
  magic call-type(a, 4, type-ptr);
  let cons-name = magic cast(int, &text, load-int(type-ptr));
  let cons-name-doc = cons-name-handler(cons-name);
  let data-arg-num = load-int(shift(type-ptr, mul-int(u, size)));
  let loop-size = sub-int(size, add-int(1, data-arg-num));
  let args-doc =
    grow(empty, loop-size, function (acc, cursor) {
      let i = add-int(cursor, add-int(1, data-arg-num));
      let t = this.magic.cast(int, type, load-int(shift(type-ptr, mul-int(u, i))));
      let v = load-int(shift(ptr, mul-int(u, i)));
      let cons-args-doc = cons-args-handler(cursor, loop-size, t, this.magic.cast(int, &t, v));
      join[acc, cons-args-doc]
    });
  if gt-int(loop-size, 0) {
    let prefix = join[cons-name-doc, atom-N("(")];
    let suffix = atom-N(")");
    _nested-comma-seq(
      prefix,
      args-doc,
      suffix,
    )
  } else {
    cons-name-doc
  }
}

define _constructor-doc(x: &text): doc {
  join[
    ansi-fg(Blue),
    ansi-bold,
    atom-N(x),
    ansi-reset,
  ]
}

define _literal-doc(d: doc): doc {
  join[
    ansi-fg(Yellow),
    d,
    ansi-reset,
  ]
}

define vet-doc<a>(x: &a): doc {
  match get-type-tag(a) {
  | Algebraic =>
    Group(_constructor-loop-doc(a, x, _constructor-doc, function (i: int, len: int, t: type, x: &t) {
      join[
        if eq-int(i, 0) {
          empty
        } else {
          break(" ")
        },
        vet-doc(x),
        if eq-int(add-int(i, 1), len) {
          empty
        } else {
          atom-N(",")
        },
      ]
    }))
  | Enum =>
    let discriminant = this.magic.cast(&a, int, x);
    let cons-name: &text = magic call-type(a, 4, discriminant);
    _constructor-doc(cons-name)
  | Int1 =>
    atom-int(sext-int1-int(magic cast(&a, int1, x)))
  | Int2 =>
    atom-int(sext-int2-int(magic cast(&a, int2, x)))
  | Int4 =>
    atom-int(sext-int4-int(magic cast(&a, int4, x)))
  | Int8 =>
    atom-int(sext-int8-int(magic cast(&a, int8, x)))
  | Int16 =>
    atom-int(sext-int16-int(magic cast(&a, int16, x)))
  | Int32 =>
    atom-int(sext-int32-int(magic cast(&a, int32, x)))
  | Int64 =>
    atom-int(magic cast(&a, int64, x))
  | Float16 =>
    atom-float(fpext-float16-float(magic cast(&a, float16, x)), 6)
  | Float32 =>
    atom-float(fpext-float32-float(magic cast(&a, float32, x)), 6)
  | Float64 =>
    atom-float(magic cast(&a, float64, x), 6)
  | Pointer =>
    atom-int(magic cast(&a, int64, x))
  | Null =>
    atom-N("null")
  | Rune =>
    _literal-doc(join[
      atom-N("`"),
      atom-rune(magic cast(&a, rune, x)),
      atom-N("`"),
    ])
  | Binary =>
    _literal-doc(join[
      atom-N("\""),
      atom-N(magic cast(&a, &text, x)),
      atom-N("\""),
    ])
  | Vector =>
    let elem-type = magic cast(int, type, load-int(shift(magic cast(&a, pointer, x), mul-int(this.word.size, 3))));
    let vec: &vector(elem-type) = magic cast(&a, &vector(elem-type), x);
    let prefix = join[_constructor-doc("Vector"), atom-N("[")];
    let suffix = atom-N("]");
    Group(_nested-comma-seq(
      prefix,
      _vet-doc-vector(elem-type, vec),
      suffix,
    ))
  | _ =>
    _literal-doc(atom-N("_"))
  | _ =>
    empty
  }
}

define vet<a, ribbon-length := 32>(x: &a): unit {
  pin tmp = vet-doc(x);
  pin item = layout(ribbon-length, tmp);
  print(item);
  print("\n");
}
