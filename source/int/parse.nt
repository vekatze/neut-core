import {
  this.bool,
  this.either {Left, Right, rho},
  this.foreign {_parse_binary, _parse_decimal, _parse_hex},
  this.memory {load-int},
  this.text {_get-content-pointer, text},
  this.unit {Unit},
}

define parse-binary<r := rho>(t: &text): ?int {
  let c-int-str = _get-content-pointer(t);
  let len = this.text.length(t);
  let result-ptr = magic alloca(int, 1);
  let result-status = _parse_binary(c-int-str, len, result-ptr);
  if lt-int(result-status, 0) {
    try _ = r;
    Left(Unit)
  } else {
    let result = load-int(result-ptr);
    try _ = r;
    Right(result)
  }
}

define parse-int<r := rho>(t: &text): ?int {
  let c-int-str = _get-content-pointer(t);
  let len = this.text.length(t);
  let result-ptr = magic alloca(int, 1);
  let result-status = _parse_decimal(c-int-str, len, result-ptr);
  if lt-int(result-status, 0) {
    try _ = r;
    Left(Unit)
  } else {
    let result = load-int(result-ptr);
    try _ = r;
    Right(result)
  }
}

define parse-hex<r := rho>(t: &text): ?int {
  let c-int-str = _get-content-pointer(t);
  let len = this.text.length(t);
  let result-ptr = magic alloca(int, 1);
  let result-status = _parse_hex(c-int-str, len, result-ptr);
  if lt-int(result-status, 0) {
    try _ = r;
    Left(Unit)
  } else {
    let result = load-int(result-ptr);
    try _ = r;
    Right(result)
  }
}
