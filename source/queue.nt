import {
  this.bool {False, True, bool},
  this.either {Right, none},
  this.list {Cons, Nil, length, list},
  this.pair {Pair, pair},
  this.unit,
}

// naive queue
data queue(a: type) {
| Queue(list(a), list(a))
}

inline empty<a>: queue(a) {
  Queue([], [])
}

define dequeue<a>(q: queue(a)): ?pair(a, queue(a)) {
  let Queue(ls, rs) = q;
  match ls, rs {
  | Nil, Nil =>
    none
  | Cons(l, ls-rest), rs =>
    Right(Pair(l, Queue(ls-rest, rs)))
  | Nil, rs =>
    dequeue(Queue(rs, []))
  }
}

define enqueue<a>(q: queue(a), x: a): queue(a) {
  let Queue(ls, rs) = q;
  Queue(ls, Cons(x, rs))
}

define size<a>(q: &queue(a)): int {
  case q {
  | Queue(ls, rs) =>
    let l1 = length(ls);
    let l2 = length(rs);
    add-int(l1, l2)
  }
}

define is-empty<a>(q: &queue(a)): bool {
  case q {
  | Queue([], []) =>
    True
  | _ =>
    False
  }
}
